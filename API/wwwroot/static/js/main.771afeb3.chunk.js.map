{"version":3,"sources":["app/common/form/TextInput.tsx","app/api/agent.ts","app/stores/adminStore.ts","app/stores/appointmentStore.ts","app/stores/commonStore.ts","app/stores/dashboardStore.ts","app/stores/doctorStore.ts","app/stores/modalStore.ts","app/stores/patientStore.ts","app/stores/userStore.ts","app/stores/rootStore.ts","features/home/LoginPage.tsx","features/nav/LeftSidebar.tsx","features/dashboard/DashboardCardAppointment.tsx","features/dashboard/DashboardAppointments.tsx","features/dashboard/DashboardStatistics.tsx","features/dashboard/DashboardWelcomeMessage.tsx","features/dashboard/Dashboard.tsx","features/patients/dashboard/PatientFilters.tsx","app/common/buttons/AquaButton.tsx","app/common/options/genderOptions.ts","app/common/form/SelectInput.tsx","app/common/form/DateInput.tsx","app/common/util/util.ts","features/patients/dashboard/NewPatientForm.tsx","features/patients/dashboard/PatientHeader.tsx","features/patients/dashboard/PatientTable.tsx","features/patients/dashboard/PatientDashboard.tsx","features/appointments/dashboard/AppointmentFilters.tsx","app/common/options/labelColors.ts","features/appointments/dashboard/AppointmentCard.tsx","app/layout/LoadingComponent.tsx","features/appointments/dashboard/AppointmentList.tsx","app/common/form/DropdownInput.tsx","app/common/form/TextAreaInput.tsx","features/appointments/dashboard/NewAppointmentForm.tsx","features/appointments/dashboard/AppointmentHeader.tsx","features/appointments/dashboard/AppointmentDashboard.tsx","features/admin/NewUserForm.tsx","app/common/modals/ConfirmationModal.tsx","features/admin/UserActions.tsx","features/admin/AdminDashboard.tsx","app/layout/PrivateRoute.tsx","features/nav/AvatarDropdown.tsx","app/common/modals/ModalContainer.tsx","features/patients/details/PatientDetailedAppointments.tsx","features/patients/details/PatientDetailedData.tsx","features/patients/details/PatientDetails.tsx","app/layout/NotFound.tsx","features/appointments/details/AppointmentDetailedHeader.tsx","features/appointments/details/AppointmentDetailedMode.tsx","app/common/options/statusOptions.ts","app/models/appointment.ts","features/appointments/details/AppointmentDetailedForm.tsx","features/appointments/details/AppointmentDetailedConditions.tsx","features/appointments/details/AppointmentDetails.tsx","features/settings/AccountDetailsForm.tsx","app/common/form/AdvancedErrorMessage.tsx","features/settings/ChangePasswordForm.tsx","features/settings/Settings.tsx","app/layout/App.tsx","index.tsx"],"names":["TextInput","input","width","type","readOnly","placeholder","label","meta","touched","error","Form","Field","Label","basic","color","style","margin","padding","display","Axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","Promise","reject","response","undefined","status","includes","removeItem","history","push","toast","info","responseBody","data","requests","url","get","then","body","post","put","delete","login","user","register","id","resetPassword","listUsers","currentUser","updateAccount","account","changePassword","oldPassword","newPassword","list","params","create","patient","details","update","values","connectCondition","appointmentId","conditionName","Condition","disconnectCondition","conditionId","size","desc","AdminStore","rootStore","this","users","map","u","key","value","text","firstName","lastName","username","observable","computed","action","a","fetchingUsers","agent","runInAction","success","Object","errors","join","userId","filter","AppointmentStore","reaction","allAppointmentPredicate","fetchAppointments","datePredicate","appointments","sortedAppointments","slice","sort","b","Date","date","getTime","entries","reduce","appointment","toISOString","split","URLSearchParams","append","groupAppointmentsByDate","fetchingAppointments","filterParams","loadingAppointment","replace","loadingCondition","condition","conditions","deletingConditionId","c","CommonStore","setItem","appLoaded","DashboardStore","fetchingConditionStats","conditionStats","console","log","toString","upcommingAppointments","DoctorStore","doctors","ModalStore","shallow","open","content","modal","PatientStore","predicate","forEach","Map","set","resetPredicate","fetchingPatients","clear","patients","loadingPatient","UserStore","role","commonStore","setToken","changingPassword","configure","enforceActions","RootStoreContext","createContext","userStore","adminStore","modalStore","patientStore","appointmentStore","doctorStore","dashboardStore","observer","useContext","validate","combineValidators","email","isRequired","password","className","Segment","padded","Header","as","icon","textAlign","Icon","name","circular","Content","onSubmit","catch","FORM_ERROR","render","handleSubmit","submitting","invalid","submitError","pristine","dirtySinceLastSubmit","component","Message","Button","fluid","loading","disabled","isAdmin","inverted","to","DashboardCardAppointment","image","gender","Card","Link","Image","floated","src","Meta","toLowerCase","format","birthDate","getFullYear","Description","reason","extra","fetchUpcommingAppointments","useEffect","Group","itemsPerRow","fetchConditionStats","marginTop","Statistic","Value","count","Subheader","aria-label","alt","Dashboard","setPredicate","fetchPatients","useState","pesel","setPesel","setLastName","setFirstName","widths","Input","onChange","e","currentTarget","onClick","AquaButton","SelectInput","options","Select","DateInput","time","rest","onBlur","onKeyDown","preventDefault","combineDateAndTime","dateString","timeString","NewPatientForm","createPatient","composeValidators","isAlphabetic","isNumeric","Modal","openModal","Table","celled","selectable","sortable","Row","HeaderCell","singleLine","Body","cursor","Cell","PatientDashboard","setDatePredicate","setAllAppointmentPredicate","Menu","vertical","attached","Item","active","labelColors","Upcomming","Rejected","Completed","AppointmentCard","marginBottom","Grid","columns","verticalAlign","Column","horizontal","doctor","Extra","maxLength","length","substr","shortenText","LoadingComponent","Dimmer","Loader","appointmentsByDate","group","divided","DropdownInput","search","selection","Dropdown","TextAreaInput","rows","createAppointment","doctorOptions","setDoctorOptions","p","getOptions","patientOptions","setPatientOptions","doctorId","patientId","appointmentValues","AppointmentHeader","AppointmentDashboard","ConfirmationModal","header","message","callback","closeModal","Actions","loadUsers","userOptions","deleteUser","dropdownElement","useRef","ref","current","state","Or","AdminDashboard","Component","isUserLoggedIn","props","logout","displayName","pointing","onClose","sub","description","updatePatient","edit","setEdit","Tab","Pane","marginLeft","Checkbox","toggle","checked","initialValues","panes","menuItem","match","loadPatient","deletePatient","parseInt","negative","menu","menuPosition","NotFound","flex","justifyContent","alignItems","flexDirection","primary","deleteAppointment","AppointmentDetailedMode","UpdateAppointmentFormValues","init","AppointmentFormValues","assign","updateAppointment","appointmentFormValues","setAppointmentFormValues","initialValue","setConditionName","requiredLength","setRequiredLength","connectCondtion","loadAppointment","AdvancedErrorMessage","statusText","Password","currentPassword","setCurrentPassword","setNewPassword","repeatedNewPassword","setRepeatedNewPassword","localError","setLocalError","setError","Settings","getUser","setAppLoaded","finally","exact","path","LoginPage","position","PatientDetails","AppointmentDetails","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.771afeb3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FieldRenderProps } from \"react-final-form\";\r\nimport { Form, FormFieldProps, Label } from \"semantic-ui-react\";\r\n\r\ninterface IProps extends FieldRenderProps<string>, FormFieldProps {\r\n  readOnly?: boolean\r\n}\r\n\r\nexport const TextInput: React.FC<IProps> = ({\r\n  input,\r\n  width,\r\n  type,\r\n  readOnly,\r\n  placeholder,\r\n  label,\r\n  meta: { touched, error },\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} type={type} width={width}>\r\n      {label && <label>{label}</label>}\r\n      <input {...input} placeholder={placeholder} readOnly={readOnly} />\r\n      {touched && error && (\r\n        <Label basic color=\"red\" style={{margin: 0, padding: '10px', display: 'flex'}}>\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n","import Axios, { AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport {\r\n  IAppointment,\r\n  IAppointmentFormValues,\r\n  UpdateAppointmentFormValues,\r\n} from \"../models/appointment\";\r\nimport { ICondition, IConditionStat } from \"../models/conditions\";\r\nimport { IDoctor } from \"../models/doctor\";\r\nimport { IPatient, IPatientFormValues } from \"../models/patient\";\r\nimport {\r\n  IRegisterUserFormValues,\r\n  IUser,\r\n  IUserFormValues,\r\n} from \"../models/user\";\r\n\r\n//63446\r\nAxios.defaults.baseURL = process.env.REACT_APP_API;\r\n\r\nAxios.interceptors.request.use(\r\n  (config) => {\r\n    const token = window.localStorage.getItem(\"jwt\");\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nAxios.interceptors.response.use(undefined, (error) => {\r\n  const { status, headers } = error.response;\r\n  if (status === 401 && headers[\"www-authenticate\"].includes(\"Bearer error\")) {\r\n    window.localStorage.removeItem(\"jwt\");\r\n    history.push(\"/\");\r\n    toast.info(\"Your session has expired. Please login again\");\r\n  }\r\n  else {\r\n    throw error.response;\r\n  }\r\n});\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst requests = {\r\n  get: (url: string) => Axios.get(url).then(responseBody),\r\n  post: (url: string, body: {}) => Axios.post(url, body).then(responseBody),\r\n  put: (url: string, body: {}) => Axios.put(url, body).then(responseBody),\r\n  delete: (url: string) => Axios.delete(url).then(responseBody),\r\n};\r\n\r\nconst User = {\r\n  login: (user: IUserFormValues): Promise<IUser> =>\r\n    requests.post(\"/user/login\", user),\r\n  register: (user: IRegisterUserFormValues): Promise<IUser> =>\r\n    requests.post(\"/user/register\", user),\r\n  delete: (id: string) => requests.delete(`/user/${id}`),\r\n  resetPassword: (id: string) => requests.post(`/user/${id}/reset`, {}),\r\n  listUsers: () => requests.get(\"/users\"),\r\n  currentUser: (): Promise<IUser> => requests.get(\"/user\"),\r\n  updateAccount: (account: IUser) => requests.put(\"/user\", account),\r\n  changePassword: (oldPassword: string, newPassword: string) =>\r\n    requests.put(\"user/password\", { oldPassword, newPassword }),\r\n};\r\n\r\nconst Patients = {\r\n  list: (params: URLSearchParams | null): Promise<IPatient[]> =>\r\n    Axios.get(\"/patients\", { params: params }).then(responseBody),\r\n  create: (patient: IPatientFormValues): Promise<IPatient> =>\r\n    requests.post(\"/patients\", patient),\r\n  details: (id: number): Promise<IPatient> => requests.get(`/patients/${id}`),\r\n  delete: (id: number) => requests.delete(`/patients/${id}`),\r\n  update: (patient: IPatient) =>\r\n    requests.put(`/patients/${patient.id}`, patient),\r\n};\r\n\r\nconst Appointments = {\r\n  list: (params: URLSearchParams): Promise<IAppointment[]> =>\r\n    Axios.get(\"/appointments\", { params: params }).then(responseBody),\r\n  create: (values: IAppointmentFormValues): Promise<IAppointment> =>\r\n    requests.post(\"/appointments\", values),\r\n  details: (id: number): Promise<IAppointment> =>\r\n    requests.get(`/appointments/${id}`),\r\n  update: (values: UpdateAppointmentFormValues) =>\r\n    requests.put(`/appointments/${values.id}`, values),\r\n  delete: (id: number) => requests.delete(`/appointments/${id}`),\r\n  connectCondition: (\r\n    appointmentId: number,\r\n    conditionName: string\r\n  ): Promise<ICondition> =>\r\n    requests.put(`/appointments/${appointmentId}/conditions`, {\r\n      Condition: conditionName,\r\n    }),\r\n  disconnectCondition: (appointmentId: number, conditionId: number) =>\r\n    requests.delete(`/appointments/${appointmentId}/conditions/${conditionId}`),\r\n};\r\n\r\nconst Doctors = {\r\n  list: (): Promise<IDoctor[]> => requests.get(\"/doctors\"),\r\n};\r\n\r\nconst Conditions = {\r\n  list: (size: number, desc: boolean): Promise<IConditionStat[]> =>\r\n    requests.get(`/conditions?size=${size}&descending=${desc}`),\r\n};\r\n\r\nexport default {\r\n  User,\r\n  Patients,\r\n  Appointments,\r\n  Doctors,\r\n  Conditions,\r\n};\r\n","import { action, computed, observable, runInAction } from \"mobx\";\r\nimport { toast } from \"react-toastify\";\r\nimport agent from \"../api/agent\";\r\nimport { IRegisterUserFormValues, IUser } from \"../models/user\";\r\nimport { RootStore } from \"./rootStore\";\r\n\r\nexport default class AdminStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n  @observable fetchingUsers: boolean = false;\r\n  @observable users: IUser[] | null = null;\r\n\r\n  @computed get userOptions() {\r\n    return this.users?.map((u) => ({\r\n      key: u.id,\r\n      value: u.id,\r\n      text: `${u.firstName} ${u.lastName} (${u.username})`,\r\n    }));\r\n  }\r\n\r\n  @action loadUsers = async () => {\r\n    try {\r\n      this.fetchingUsers = true;\r\n      const users = await agent.User.listUsers();\r\n      runInAction(() => {\r\n        this.users = users;\r\n        this.fetchingUsers = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => (this.fetchingUsers = false));\r\n      toast.error(\"Could not fetch users.\");\r\n    }\r\n  };\r\n\r\n  @action register = async (values: IRegisterUserFormValues) => {\r\n    try {\r\n      const user = await agent.User.register(values);\r\n      runInAction(() => {\r\n        this.users = [...this.users!, user];\r\n      });\r\n      toast.success(\"User created.\");\r\n    } catch (error) {\r\n      toast.error(Object.values(error?.data?.errors).join(\"\\n\"));\r\n    }\r\n  };\r\n\r\n  @action resetPassword = async (userId: string) => {\r\n    try {\r\n      await agent.User.resetPassword(userId);\r\n      toast.success(\"Password reseted.\");\r\n    } catch (error) {\r\n      toast.error(\"Could not reset password.\");\r\n    }\r\n  };\r\n\r\n  @action deleteUser = async (userId: string) => {\r\n    try {\r\n      await agent.User.delete(userId);\r\n      runInAction(() => {\r\n        this.users = this.users!.filter((u) => u.id !== userId);\r\n      });\r\n      toast.success(\"User deleted.\");\r\n    } catch (error) {\r\n      toast.error(\"Could not delete user.\");\r\n    }\r\n  };\r\n}\r\n","import { action, computed, observable, reaction, runInAction } from \"mobx\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport {\r\n  IAppointment,\r\n  IAppointmentFormValues,\r\n  UpdateAppointmentFormValues,\r\n} from \"../models/appointment\";\r\nimport { IPatient } from \"../models/patient\";\r\nimport { RootStore } from \"./rootStore\";\r\n\r\nexport default class AppointmentStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n    reaction(\r\n      () => this.allAppointmentPredicate,\r\n      () => this.fetchAppointments()\r\n    );\r\n    reaction(\r\n      () => this.datePredicate,\r\n      () => this.fetchAppointments()\r\n    );\r\n  }\r\n\r\n  @observable allAppointmentPredicate: string = \"true\";\r\n  @observable datePredicate: Date = new Date();\r\n  @observable fetchingAppointments = false;\r\n  @observable appointments: IAppointment[] | null = null;\r\n  @observable patients: IPatient[] | null = null;\r\n  @observable doctors: IPatient[] | null = null;\r\n  @observable appointment: IAppointment | null = null;\r\n  @observable loadingAppointment = false;\r\n  @observable updatingAppointment = false;\r\n  @observable loadingCondition = false;\r\n  @observable deletingConditionId = -1;\r\n\r\n  @computed get filterParams() {\r\n    const params = new URLSearchParams();\r\n    params.append(\"allAppointments\", this.allAppointmentPredicate);\r\n    params.append(\"startDate\", this.datePredicate.toISOString());\r\n    return params;\r\n  }\r\n\r\n  @action setAllAppointmentPredicate = (value: string) => {\r\n    this.allAppointmentPredicate = value;\r\n  };\r\n\r\n  @action setDatePredicate = (value: Date) => {\r\n    this.datePredicate = value;\r\n  };\r\n\r\n  @action fetchAppointments = async () => {\r\n    try {\r\n      this.fetchingAppointments = true;\r\n      const appointments = await agent.Appointments.list(this.filterParams);\r\n      runInAction(() => {\r\n        this.appointments = appointments;\r\n        this.fetchingAppointments = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.fetchingAppointments = false;\r\n      });\r\n      toast.error(\"Could not fetch appointments.\");\r\n    }\r\n  };\r\n\r\n  @computed get appointmentsByDate() {\r\n    if (this.appointments !== null) {\r\n      return this.groupAppointmentsByDate(this.appointments!);\r\n    }\r\n    return null\r\n  }\r\n\r\n  groupAppointmentsByDate(appointments: IAppointment[]) {\r\n    const sortedAppointments = appointments\r\n      .slice()\r\n      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\r\n    return Object.entries(\r\n      sortedAppointments.reduce((appointments, appointment) => {\r\n        const date = new Date(appointment.date).toISOString().split(\"T\")[0];\r\n        appointments[date] = appointments[date]\r\n          ? [...appointments[date], appointment]\r\n          : [appointment];\r\n        return appointments;\r\n      }, {} as { [key: string]: IAppointment[] })\r\n    );\r\n  }\r\n\r\n  @action createAppointment = async (values: IAppointmentFormValues) => {\r\n    try {\r\n      const appointment = await agent.Appointments.create(values);\r\n      runInAction(() => {\r\n        if (new Date(appointment.date) >= new Date(this.datePredicate)) {\r\n          this.appointments = [...this.appointments!, appointment];\r\n        }\r\n      });\r\n      toast.success(\"Created appointment.\");\r\n    } catch (e) {\r\n      toast.error(\"Could not create appointment.\");\r\n    }\r\n  };\r\n\r\n  @action loadAppointment = async (id: number) => {\r\n    try {\r\n      this.loadingAppointment = true;\r\n      const appointment = await agent.Appointments.details(id);\r\n      runInAction(() => {\r\n        this.loadingAppointment = false;\r\n        this.appointment = appointment;\r\n      });\r\n    } catch (e) {\r\n      runInAction(() => {\r\n        this.loadingAppointment = false;\r\n      });\r\n      toast.error(\"Could not load appointment.\");\r\n    }\r\n  };\r\n\r\n  @action updateAppointment = async (\r\n    appointment: UpdateAppointmentFormValues\r\n  ) => {\r\n    try {\r\n      await agent.Appointments.update(appointment);\r\n      toast.success(\"Appointment updated.\");\r\n    } catch (e) {\r\n      toast.error(\"Could not update appointment.\");\r\n    }\r\n  };\r\n\r\n  @action deleteAppointment = async (id: number) => {\r\n    try {\r\n      await agent.Appointments.delete(id);\r\n      runInAction(() => {\r\n        this.appointment = null;\r\n      });\r\n      history.replace(\"/appointments\");\r\n      toast.success(\"Appointment deleted.\");\r\n    } catch (e) {\r\n      toast.error(\"Could not delete appointment.\");\r\n    }\r\n  };\r\n\r\n  @action connectCondtion = async (conditionName: string) => {\r\n    try {\r\n      this.loadingCondition = true;\r\n      const condition = await agent.Appointments.connectCondition(\r\n        this.appointment!.id,\r\n        conditionName\r\n      );\r\n      runInAction(() => {\r\n        this.appointment!.conditions = [\r\n          ...this.appointment?.conditions!,\r\n          condition,\r\n        ];\r\n        this.loadingCondition = false;\r\n      });\r\n      toast.success(\"Added condition.\");\r\n    } catch (e) {\r\n      runInAction(() => {\r\n        this.loadingCondition = false;\r\n      });\r\n      toast.error(\"Could not add condition.\");\r\n    }\r\n  };\r\n\r\n  @action disconnectCondition = async (conditionId: number) => {\r\n    try {\r\n      this.deletingConditionId = conditionId;\r\n      await agent.Appointments.disconnectCondition(\r\n        this.appointment!.id,\r\n        conditionId\r\n      );\r\n      runInAction(() => {\r\n        this.appointment!.conditions = this.appointment!.conditions?.filter(\r\n          (c) => c.id !== conditionId\r\n        );\r\n        this.deletingConditionId = -1;\r\n        toast.success(\"Condition deleted.\");\r\n      });\r\n    } catch (e) {\r\n      runInAction(() => {\r\n        this.deletingConditionId = -1;\r\n      });\r\n      toast.error(\"Could not delete condition.\");\r\n    }\r\n  };\r\n}\r\n","import { action, observable, reaction } from \"mobx\";\r\nimport { RootStore } from \"./rootStore\";\r\n\r\nexport default class CommonStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n    reaction(\r\n      () => this.token,\r\n      (token) => {\r\n        if (token) {\r\n          window.localStorage.setItem(\"jwt\", token);\r\n        } else {\r\n          window.localStorage.removeItem(\"jwt\");\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  @observable token: string | null = window.localStorage.getItem('jwt');\r\n  @observable appLoaded = false;\r\n\r\n  @action setToken = (token: string | null) => {\r\n    this.token = token;\r\n  };\r\n\r\n  @action setAppLoaded = () => {\r\n    this.appLoaded = true;\r\n  }\r\n}\r\n","import { action, observable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { IAppointment } from \"../models/appointment\";\r\nimport { IConditionStat } from \"../models/conditions\";\r\nimport { RootStore } from \"./rootStore\";\r\n\r\nexport default class DashboardStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @observable conditionStats: IConditionStat[] | null = null;\r\n  @observable fetchingConditionStats = false;\r\n\r\n  @observable upcommingAppointments: IAppointment[] | null = null;\r\n  @observable fetchingAppointments = false;\r\n\r\n  @action fetchConditionStats = async (size: number, desc: boolean) => {\r\n    try {\r\n      this.fetchingConditionStats = true;\r\n      const conditionStats = await agent.Conditions.list(size, desc);\r\n      runInAction(() => {\r\n        this.conditionStats = conditionStats;\r\n        this.fetchingConditionStats = false;\r\n      });\r\n    } catch (e) {\r\n      runInAction(() => {\r\n        this.fetchingConditionStats = false;\r\n      });\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  @action fetchUpcommingAppointments = async (size: number) => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      params.append(\"allAppointments\", \"false\");\r\n      params.append(\"status\", \"Upcomming\");\r\n      params.append(\"size\", size.toString());\r\n      const appointments = await agent.Appointments.list(params);\r\n      runInAction(() => {\r\n        this.upcommingAppointments = appointments;\r\n        this.fetchingAppointments = false;\r\n      });\r\n    } catch (e) {\r\n      runInAction(() => {\r\n        this.fetchingAppointments = false;\r\n      });\r\n      console.log(e);\r\n    }\r\n  };\r\n}\r\n","import { action, observable, runInAction } from \"mobx\";\r\nimport { toast } from \"react-toastify\";\r\nimport agent from \"../api/agent\";\r\nimport { IDoctor } from \"../models/doctor\";\r\nimport { RootStore } from \"./rootStore\";\r\n\r\nexport default class DoctorStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @observable doctors: IDoctor[] | null = null;\r\n  @action fetchDoctors = async() => {\r\n      try {\r\n          const doctors = await agent.Doctors.list();\r\n          runInAction(() => {\r\n              this.doctors = doctors\r\n          })\r\n      } catch(e) {\r\n          toast.error(\"Could not fetch doctors\")\r\n      }\r\n  }\r\n}\r\n","import { action, observable } from \"mobx\";\r\nimport { RootStore } from \"./rootStore\";\r\n\r\nexport default class ModalStore {\r\n    rootStore: RootStore\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable.shallow modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    @action openModal = (content: any) => {\r\n        this.modal.body = content;\r\n        this.modal.open = true;\r\n    }\r\n\r\n    @action closeModal = () => {\r\n        this.modal.body = null;\r\n        this.modal.open = false;\r\n    }\r\n}","import { action, computed, observable, runInAction } from \"mobx\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { IPatient, IPatientFormValues } from \"../models/patient\";\r\nimport { RootStore } from \"./rootStore\";\r\n\r\nexport default class PatientStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @observable predicate = new Map<string, string>();\r\n  @observable patients: IPatient[] | null = null;\r\n  @observable fetchingPatients = false;\r\n  @observable patient: IPatient | null = null;\r\n  @observable loadingPatient = false;\r\n\r\n  @action setPredicate = (key: string, value: string) => {\r\n    this.predicate.set(key, value);\r\n  };\r\n\r\n  @computed get filterParams() {\r\n    const params = new URLSearchParams();\r\n    this.predicate.forEach((value, key) => {\r\n      params.append(key, value);\r\n    });\r\n    return params;\r\n  }\r\n\r\n  @action fetchPatients = async (resetPredicate: boolean = false) => {\r\n    try {\r\n      this.fetchingPatients = true;\r\n      if (resetPredicate) {\r\n        this.predicate.clear();\r\n      }\r\n      const params = this.filterParams;\r\n      const patients = await agent.Patients.list(params);\r\n      runInAction(() => {\r\n        this.patients = patients;\r\n        this.fetchingPatients = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.fetchingPatients = false;\r\n      });\r\n      toast.error(\"Could not fetch patients.\");\r\n    }\r\n  };\r\n\r\n  @action createPatient = async (values: IPatientFormValues) => {\r\n    try {\r\n      const patient = await agent.Patients.create(values);\r\n      runInAction(() => {\r\n        this.patients = [...this.patients!, patient];\r\n      });\r\n      toast.success(\"Patient created.\");\r\n    } catch (error) {\r\n      toast.error(Object.values(error?.data?.errors).join(\"\\n\"));\r\n    }\r\n  };\r\n\r\n  @action loadPatient = async (id: number) => {\r\n    try {\r\n      this.loadingPatient = true;\r\n      const patient = await agent.Patients.details(id);\r\n      runInAction(() => {\r\n        this.patient = patient;\r\n        this.loadingPatient = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingPatient = false;\r\n      });\r\n      history.push(\"/notfound\");\r\n    }\r\n  };\r\n\r\n  @action deletePatient = async (id: number) => {\r\n    try {\r\n      await agent.Patients.delete(id);\r\n      runInAction(() => {\r\n        this.patient = null;\r\n      });\r\n      history.replace(\"/patients\");\r\n      toast.success(\"Patient deleted.\");\r\n    } catch (error) {\r\n      toast.error(\"Could not delete patient.\");\r\n    }\r\n  };\r\n\r\n  @action updatePatient = async (patient: IPatient) => {\r\n    try {\r\n      await agent.Patients.update(patient);\r\n      runInAction(() => {\r\n        this.patient = patient;\r\n      });\r\n      toast.success(\"Patient updated.\");\r\n    } catch (error) {\r\n      toast.error(\"Could not update patient.\");\r\n    }\r\n  };\r\n}\r\n","import { action, computed, observable, runInAction } from \"mobx\";\r\nimport { RootStore } from \"./rootStore\";\r\nimport { IUser } from \"../models/user\";\r\nimport agent from \"../api/agent\";\r\nimport { history } from \"../..\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport default class UserStore {\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @observable user: IUser | null = null;\r\n  @observable changingPassword = false;\r\n\r\n  @computed get isUserLoggedIn() {\r\n    return this.user !== null;\r\n  }\r\n\r\n  @computed get isAdmin() {\r\n    return this.user && this.user.role === \"Admin\"\r\n  }\r\n\r\n  @action login = async (values: any) => {\r\n    try {\r\n      const user = await agent.User.login(values);\r\n      runInAction(() => {\r\n        this.user = user;\r\n      });\r\n      this.rootStore.commonStore.setToken(user.token);\r\n      history.push(\"/dashboard\");\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  @action logout = () => {\r\n    try {\r\n      this.rootStore.commonStore.setToken(null)\r\n      this.user = null;\r\n      history.push(\"/\")\r\n    } catch(error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  @action getUser = async () => {\r\n    try {\r\n      const user = await agent.User.currentUser()\r\n      runInAction(() => {\r\n        this.user = user\r\n      })\r\n    } catch(error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  @action updateAccount = async (values: any) => {\r\n    try {\r\n      await agent.User.updateAccount(values);\r\n      runInAction(() => {\r\n        this.user = values;\r\n      })\r\n      toast.success(\"Account updated.\");\r\n    } catch(e) {\r\n      toast.error(\"Could not update account.\")\r\n    }\r\n  }\r\n\r\n  @action changePassword = async(oldPassword: string, newPassword: string) => {\r\n    try {\r\n      this.changingPassword = true;\r\n      await agent.User.changePassword(oldPassword, newPassword);\r\n      runInAction(() => {\r\n        this.changingPassword = false;\r\n      })\r\n      toast.success(\"Password changed.\")\r\n    } catch(e) {\r\n      runInAction(() => {\r\n        this.changingPassword = false;\r\n      })\r\n      throw e;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n","import { configure } from \"mobx\";\r\nimport { createContext } from \"react\";\r\nimport AdminStore from \"./adminStore\";\r\nimport AppointmentStore from \"./appointmentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport DashboardStore from \"./dashboardStore\";\r\nimport DoctorStore from \"./doctorStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport PatientStore from \"./patientStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\nconfigure({ enforceActions: \"always\" });\r\n\r\nexport class RootStore {\r\n  userStore: UserStore;\r\n  commonStore: CommonStore;\r\n  adminStore: AdminStore;\r\n  modalStore: ModalStore;\r\n  patientStore: PatientStore;\r\n  appointmentStore: AppointmentStore;\r\n  doctorStore: DoctorStore;\r\n  dashboardStore: DashboardStore;\r\n\r\n  constructor() {\r\n    this.userStore = new UserStore(this);\r\n    this.commonStore = new CommonStore(this);\r\n    this.adminStore = new AdminStore(this);\r\n    this.modalStore = new ModalStore(this);\r\n    this.patientStore = new PatientStore(this);\r\n    this.appointmentStore = new AppointmentStore(this);\r\n    this.doctorStore = new DoctorStore(this);\r\n    this.dashboardStore = new DashboardStore(this);\r\n  }\r\n}\r\n\r\nexport const RootStoreContext = createContext(new RootStore());\r\n","import React, { useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Header,\r\n  Icon,\r\n  Message,\r\n  Segment,\r\n} from \"semantic-ui-react\";\r\n\r\nimport { Field, Form as FinalForm } from \"react-final-form\";\r\nimport \"./LoginPage.css\";\r\nimport { IUserFormValues } from \"../../app/models/user\";\r\nimport { TextInput } from \"../../app/common/form/TextInput\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport { combineValidators, isRequired } from \"revalidate\";\r\n\r\nimport { FORM_ERROR } from \"final-form\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst LoginPage = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { login } = rootStore.userStore;\r\n\r\n  const validate = combineValidators({\r\n    email: isRequired(\"Email\"),\r\n    password: isRequired(\"Password\"),\r\n  });\r\n\r\n  return (\r\n    <div className=\"homePage\">\r\n      <Segment padded=\"very\">\r\n        <Header as=\"h1\" icon textAlign=\"center\">\r\n          <Icon name=\"user doctor\" circular />\r\n          <Header.Content style={{ padding: \"0px 30px\" }}>\r\n            Medical Center\r\n          </Header.Content>\r\n        </Header>\r\n        <Segment padded>\r\n          <FinalForm\r\n            onSubmit={(values: IUserFormValues) =>\r\n              login(values).catch((error) => {\r\n                return {\r\n                  [FORM_ERROR]: error,\r\n                };\r\n              })\r\n            }\r\n            validate={validate}\r\n            render={({\r\n              handleSubmit,\r\n              submitting,\r\n              invalid,\r\n              submitError,\r\n              pristine,\r\n              dirtySinceLastSubmit,\r\n            }) => (\r\n              <Form onSubmit={handleSubmit}>\r\n                <Field name=\"email\" component={TextInput} placeholder=\"Email\" />\r\n                <Field\r\n                  name=\"password\"\r\n                  component={TextInput}\r\n                  placeholder=\"Password\"\r\n                  type=\"password\"\r\n                />\r\n                {submitError && !dirtySinceLastSubmit && (\r\n                  <Message>\r\n                    <Message.Content content=\"Invalid email or password\" />\r\n                  </Message>\r\n                )}\r\n                <Button\r\n                  fluid\r\n                  content=\"Login\"\r\n                  loading={submitting}\r\n                  disabled={\r\n                    (invalid && !dirtySinceLastSubmit) || pristine || submitting\r\n                  }\r\n                />\r\n              </Form>\r\n            )}\r\n          />\r\n        </Segment>\r\n      </Segment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(LoginPage);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Header, Icon } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport \"./LeftSidebar.css\";\r\n\r\nconst LeftSidebar = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { isAdmin } = rootStore.userStore;\r\n\r\n  return (\r\n    <div className=\"leftSidebar\">\r\n      <div className=\"leftSidebar__logo\">\r\n        <Header as=\"h2\" icon textAlign=\"center\" inverted>\r\n          <Icon name=\"user doctor\" circular />\r\n          <Header.Content>Medical Center</Header.Content>\r\n        </Header>\r\n      </div>\r\n      <div className=\"leftSidebar__items\">\r\n        <NavLink to=\"/dashboard\">\r\n          <div className=\"leftSidebar__item\">\r\n            <Icon\r\n              name=\"grid layout\"\r\n              size=\"large\"\r\n              className=\"leftSidebar__icon\"\r\n            />\r\n            <h3 className=\"leftSidebar__caption\">Dashboard</h3>\r\n          </div>\r\n        </NavLink>\r\n        <NavLink to=\"/patients\" className=\"leftSidebar__item\">\r\n          <Icon name=\"users\" size=\"large\" className=\"leftSidebar__icon\" />\r\n          <h3 className=\"leftSidebar__caption\">Patients</h3>\r\n        </NavLink>\r\n        <NavLink to=\"/appointments\" className=\"leftSidebar__item\">\r\n          <Icon\r\n            name=\"calendar alternate outline\"\r\n            size=\"large\"\r\n            className=\"leftSidebar__icon\"\r\n          />\r\n          <h3 className=\"leftSidebar__caption\">Appointments</h3>\r\n        </NavLink>\r\n        {isAdmin && (\r\n          <NavLink to=\"/admin\" className=\"leftSidebar__item\">\r\n            <Icon\r\n              name=\"user secret\"\r\n              size=\"large\"\r\n              className=\"leftSidebar__icon\"\r\n            />\r\n            <h3 className=\"leftSidebar__caption\">Admin</h3>\r\n          </NavLink>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(LeftSidebar);\r\n","import { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { IAppointment } from \"../../app/models/appointment\";\r\n\r\ninterface IProps {\r\n  appointment: IAppointment;\r\n}\r\n\r\nconst DashboardCardAppointment: React.FC<IProps> = ({ appointment }) => {\r\n  const image =\r\n    \"https://react.semantic-ui.com/images/avatar/large/\" +\r\n    (appointment.patient?.gender === \"Male\" ? \"matthew.png\" : \"molly.png\");\r\n\r\n  if (!appointment.patient?.id) {\r\n    return (\r\n      <Card>\r\n        <Card.Content>LUL</Card.Content>\r\n      </Card>\r\n    );\r\n  } else\r\n    return (\r\n      <Card as={Link} to={`/appointments/${appointment.id}`}>\r\n        <Card.Content>\r\n          {console.log(appointment.patient?.id)}\r\n          {!!appointment.patient?.id && (\r\n            <>\r\n              {console.log(\"EZZ2\")}\r\n              <Image floated=\"right\" size=\"mini\" circular src={image} />\r\n              <Card.Header\r\n                as={Link}\r\n                to={`/patients/${appointment.patient?.id}`}\r\n              >\r\n                {appointment.patient?.firstName} {appointment.patient?.lastName}\r\n              </Card.Header>\r\n              <Card.Meta>\r\n                <Icon name={appointment.patient?.gender.toLowerCase() as any} />\r\n                {`Birth: ${format(\r\n                  new Date(appointment.patient?.birthDate),\r\n                  \"yyyy.MM.dd\"\r\n                )} (${\r\n                  new Date().getFullYear() -\r\n                  new Date(appointment.patient?.birthDate!).getFullYear()\r\n                } yrs old) `}{\" \"}\r\n              </Card.Meta>\r\n            </>\r\n          )}\r\n          <Card.Description>\r\n            <strong>Reason: </strong>\r\n            {appointment.reason}\r\n          </Card.Description>\r\n        </Card.Content>\r\n        {!!appointment.date && (\r\n          <Card.Content extra>\r\n            <Icon name=\"calendar check outline\" />\r\n            {format(new Date(appointment.date), \"hh:mm dd.MM.yyyy\")}\r\n          </Card.Content>\r\n        )}\r\n      </Card>\r\n    );\r\n};\r\n\r\nexport default DashboardCardAppointment;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport { Card, Header } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport DashboardCardAppointment from \"./DashboardCardAppointment\";\r\n\r\nconst DashboardAppointments = () => {\r\n  const CARDS = 3;\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    upcommingAppointments,\r\n    fetchUpcommingAppointments,\r\n  } = rootStore.dashboardStore;\r\n  useEffect(() => {\r\n    fetchUpcommingAppointments(CARDS);\r\n  }, [fetchUpcommingAppointments]);\r\n  return (\r\n    <div className=\"dashboard__appointments\">\r\n      <Header as=\"h1\">Upcomming Appointments</Header>\r\n      <Card.Group itemsPerRow={CARDS}>\r\n        {upcommingAppointments?.map((appointment) => (\r\n          <DashboardCardAppointment\r\n            key={appointment.id}\r\n            appointment={appointment}\r\n          />\r\n        ))}\r\n      </Card.Group>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(DashboardAppointments);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport { Header, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\n\r\nconst DashboardStatistics = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    fetchConditionStats,\r\n    fetchingConditionStats,\r\n    conditionStats,\r\n  } = rootStore.dashboardStore;\r\n  useEffect(() => {\r\n    fetchConditionStats(5, true);\r\n  }, [fetchConditionStats]);\r\n  return (\r\n    <div className=\"dashboard__statistics\">\r\n      <Header as=\"h1\">Condition Statistics</Header>\r\n      <Segment style={{ marginTop: \"0\" }} loading={fetchingConditionStats}>\r\n        <div className=\"dashboard__conditions\">\r\n          {conditionStats?.map((condition) => (\r\n            <Statistic key={condition.name}>\r\n              <Statistic.Value>{condition.count}</Statistic.Value>\r\n              <Statistic.Label>{condition.name}</Statistic.Label>\r\n            </Statistic>\r\n          ))}\r\n        </div>\r\n      </Segment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(DashboardStatistics);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\n\r\nconst DashboardWelcomeMessage = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { user } = rootStore.userStore;\r\n  return (\r\n    <div className=\"dashboard__message\">\r\n      <Header as=\"h1\">\r\n        Welcome Back!\r\n        <Header.Subheader>\r\n          {user?.firstName} {user?.lastName}{\" \"}\r\n          <span role=\"img\" aria-label=\"hands\">\r\n            👋\r\n          </span>\r\n        </Header.Subheader>\r\n      </Header>\r\n      <img\r\n        className=\"dashboard__image\"\r\n        src=\"./assets/doctors.png\"\r\n        alt=\"doctors-cartoon\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(DashboardWelcomeMessage);\r\n","import React from \"react\";\r\nimport \"./Dashboard.css\";\r\nimport DashboardAppointments from \"./DashboardAppointments\";\r\nimport DashboardStatistics from \"./DashboardStatistics\";\r\nimport DashboardWelcomeMessage from \"./DashboardWelcomeMessage\";\r\n\r\nconst Dashboard = () => {\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <DashboardWelcomeMessage/>\r\n      <DashboardAppointments/>\r\n      <DashboardStatistics/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { Button, Form, Input } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\nconst PatientFilters = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { setPredicate, fetchPatients, fetchingPatients } = rootStore.patientStore;\r\n  const [pesel, setPesel] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n\r\n  const handleFilter = () => {\r\n    setPredicate(\"pesel\", pesel)\r\n    setPredicate(\"lastName\", lastName)\r\n    setPredicate(\"firstName\", firstName)\r\n    fetchPatients();\r\n  }\r\n\r\n  return (\r\n    <Form className=\"patientFilters\">\r\n      <Form.Group widths=\"equal\">\r\n        <Form.Field>\r\n          <Input\r\n            fluid\r\n            placeholder=\"Pesel\"\r\n            icon=\"search\"\r\n            value={pesel}\r\n            onChange={(e) => setPesel(e.currentTarget.value)}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <Input\r\n            fluid\r\n            placeholder=\"Last name\"\r\n            icon=\"search\"\r\n            value={lastName}\r\n            onChange={(e) => setLastName(e.currentTarget.value)}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <Input\r\n            fluid\r\n            placeholder=\"First name\"\r\n            icon=\"search\"\r\n            value={firstName}\r\n            onChange={(e) => setFirstName(e.currentTarget.value)}\r\n          />\r\n        </Form.Field>\r\n        <Button content=\"Search\" onClick={handleFilter} loading={fetchingPatients}/>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default observer(PatientFilters);\r\n","import React from 'react'\r\nimport \"./AquaButton.css\"\r\n\r\n\r\ninterface IProps {\r\n    content: string;\r\n    onClick?: () => void;\r\n}\r\n\r\nconst AquaButton: React.FC<IProps> = ({content, onClick}) => {\r\n    return (\r\n        <div className=\"aquaButton\" onClick={onClick}>\r\n           {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AquaButton\r\n","export const gender = [\r\n    { key: 'male', text: 'Male', value: 'Male' },\r\n    { key: 'female', text: 'Female', value: 'Female' },\r\n    { key: 'other', text: 'Other', value: 'Other' }\r\n  ];","import React from \"react\";\r\nimport { FieldRenderProps } from \"react-final-form\";\r\nimport { FormFieldProps, Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface IProps extends FieldRenderProps<string>, FormFieldProps {\r\n  readOnly?: boolean\r\n}\r\n\r\nexport const SelectInput: React.FC<IProps> = ({\r\n  input,\r\n  width,\r\n  options,\r\n  readOnly,\r\n  label,\r\n  placeholder,\r\n  meta: { touched, error },\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} width={width}>\r\n      {label && <label>{label}</label>}\r\n      <Select\r\n        value={input.value}\r\n        disabled={readOnly}\r\n        onChange={(e, data) => input.onChange(data.value)}\r\n        placeholder={placeholder}\r\n        options={options}\r\n      />\r\n      {touched && error && (\r\n        <Label\r\n          basic\r\n          color=\"red\"\r\n          style={{ margin: 0, padding: \"10px\", display: \"flex\" }}\r\n        >\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { FieldRenderProps } from \"react-final-form\";\r\nimport { FormFieldProps, Form, Label } from \"semantic-ui-react\";\r\nimport { DateTimePicker } from \"react-widgets\";\r\n\r\ninterface IProps extends FieldRenderProps<Date>, FormFieldProps {\r\n  readOnly?: boolean;\r\n}\r\n\r\nexport const DateInput: React.FC<IProps> = ({\r\n  id = undefined,\r\n  label,\r\n  input,\r\n  width,\r\n  date = false,\r\n  time = false,\r\n  readOnly,\r\n  placeholder,\r\n  meta: { touched, error },\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} width={width}>\r\n      {label && <label>{label}</label>}\r\n      <DateTimePicker\r\n        date={date}\r\n        time={time}\r\n        placeholder={placeholder}\r\n        disabled={readOnly}\r\n        value={input.value as any === '' ? undefined : new Date(input.value)}\r\n        onChange={input.onChange}\r\n        onBlur={input.onBlur}\r\n        onKeyDown={(e) => e.preventDefault()}\r\n        {...rest}\r\n      />\r\n      {touched && error && (\r\n        <Label basic color=\"red\">\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n","export const combineDateAndTime = (date: Date, time: Date) => {\r\n    const dateString = date.toISOString().split('T')[0]\r\n    const timeString = time.toISOString().split('T')[1]\r\n    return new Date(dateString + \"T\" + timeString);\r\n  };\r\n  ","import React, { useContext } from \"react\";\r\nimport { Button, Form, Header, Modal } from \"semantic-ui-react\";\r\nimport { Field, Form as FinalForm } from \"react-final-form\";\r\nimport { gender } from \"../../../app/common/options/genderOptions\";\r\nimport { SelectInput } from \"../../../app/common/form/SelectInput\";\r\nimport { TextInput } from \"../../../app/common/form/TextInput\";\r\nimport { DateInput } from \"../../../app/common/form/DateInput\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport { IPatientFormValues } from \"../../../app/models/patient\";\r\nimport {\r\n  combineValidators,\r\n  composeValidators,\r\n  isAlphabetic,\r\n  isNumeric,\r\n  isRequired,\r\n} from \"revalidate\";\r\nimport { combineDateAndTime } from \"../../../app/common/util/util\";\r\n\r\nconst NewPatientForm = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { createPatient } = rootStore.patientStore;\r\n  const validate = combineValidators({\r\n    firstName: composeValidators(isRequired, isAlphabetic)(\"First Name\"),\r\n    lastName: composeValidators(isRequired, isAlphabetic)(\"Last Name\"),\r\n    pesel: composeValidators(isRequired, isNumeric)(\"Pesel\"),\r\n  });\r\n\r\n  const handleFinalForm = (values: IPatientFormValues): Promise<void> => {\r\n    values.birthDate = combineDateAndTime(values.birthDate!, values.birthDate!)\r\n    return createPatient(values)\r\n  }\r\n  return (\r\n    <Modal.Content>\r\n      <Header as=\"h1\">New Patient</Header>\r\n      <FinalForm\r\n        validate={validate}\r\n        onSubmit={handleFinalForm}\r\n        render={({\r\n          handleSubmit,\r\n          submitting,\r\n          invalid,\r\n          pristine,\r\n          dirtySinceLastSubmit,\r\n        }) => (\r\n          <Form onSubmit={handleSubmit}>\r\n            <Field\r\n              component={TextInput}\r\n              label=\"First Name\"\r\n              name=\"firstName\"\r\n              placeholder=\"First Name\"\r\n            />\r\n            <Field\r\n              component={TextInput}\r\n              label=\"Last Name\"\r\n              name=\"lastName\"\r\n              placeholder=\"Last Name\"\r\n            />\r\n            <Field\r\n              component={DateInput}\r\n              label=\"Birth Date\"\r\n              date={true}\r\n              name=\"birthDate\"\r\n              placeholder=\"Birth Date\"\r\n            />\r\n            <Field\r\n              component={TextInput}\r\n              label=\"Pesel\"\r\n              name=\"pesel\"\r\n              placeholder=\"Pesel\"\r\n            />\r\n            <Field\r\n              component={SelectInput}\r\n              label=\"Gender\"\r\n              name=\"gender\"\r\n              placeholder=\"Gender\"\r\n              options={gender}\r\n            />\r\n            <Button\r\n              color=\"blue\"\r\n              content=\"Create\"\r\n              fluid\r\n              loading={submitting}\r\n              disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n            />\r\n          </Form>\r\n        )}\r\n      />\r\n    </Modal.Content>\r\n  );\r\n};\r\n\r\nexport default NewPatientForm;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport AquaButton from \"../../../app/common/buttons/AquaButton\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport NewPatientForm from \"./NewPatientForm\";\r\n\r\nconst PatientHeader = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { openModal } = rootStore.modalStore;\r\n  return (\r\n    <div className=\"patientHeader\">\r\n      <h1>Patients</h1>\r\n      <AquaButton content=\"+\" onClick={() => openModal(<NewPatientForm/>)} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(PatientHeader);\r\n","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { Header, Icon, Table } from \"semantic-ui-react\";\r\nimport { history } from \"../../..\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\nconst PatientTable = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { patients } = rootStore.patientStore;\r\n  const selectPatient = (id: number) => {\r\n    history.push(`/patients/${id}`)\r\n  };\r\n  return (\r\n    <div className=\"patientTable\">\r\n      <Table celled padded selectable sortable>\r\n        <Table.Header>\r\n          <Table.Row >\r\n            <Table.HeaderCell width={3} singleLine>\r\n              Pesel\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell width={4} singleLine>\r\n              Last Name\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell width={4} singleLine>\r\n              First Name\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell width={1} singleLine>\r\n              Gender\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell width={4} singleLine>\r\n              Date of birth\r\n            </Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n\r\n        <Table.Body>\r\n          {patients?.map((patient) => (\r\n            <Table.Row\r\n              style={{cursor: 'pointer'}}\r\n              key={patient.id}\r\n              onClick={() => selectPatient(patient.id)}\r\n            >\r\n              <Table.Cell singleLine>\r\n                <Header as=\"h4\">{patient.pesel}</Header>\r\n              </Table.Cell>\r\n              <Table.Cell singleLine>{patient.lastName}</Table.Cell>\r\n              <Table.Cell singleLine>{patient.firstName}</Table.Cell>\r\n              <Table.Cell singleLine textAlign=\"center\">\r\n                <Icon name={patient.gender === \"Other\" ? \"other gender\" : patient.gender.toLowerCase() as any} size=\"large\" />\r\n              </Table.Cell>\r\n              <Table.Cell>\r\n                {format(new Date(patient.birthDate.toString()), \"yyyy-MM-dd\")}\r\n              </Table.Cell>\r\n            </Table.Row>\r\n          ))}\r\n        </Table.Body>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(PatientTable);\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport \"./PatientDashboard.css\";\r\nimport PatientFilters from \"./PatientFilters\";\r\nimport PatientHeader from \"./PatientHeader\";\r\nimport PatientTable from \"./PatientTable\";\r\n\r\nconst PatientDashboard = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { fetchPatients } = rootStore.patientStore;\r\n  useEffect(() => {\r\n    fetchPatients(true);\r\n  }, [fetchPatients]);\r\n  return (\r\n    <div className=\"patientDashboard\">\r\n      <PatientHeader />\r\n      <PatientFilters />\r\n      <PatientTable />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientDashboard;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { Calendar } from \"react-widgets\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\nconst AppointmentFilters = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    setDatePredicate,\r\n    datePredicate,\r\n    allAppointmentPredicate,\r\n    setAllAppointmentPredicate,\r\n  } = rootStore.appointmentStore;\r\n  return (\r\n    <div className=\"appointmentFilters\">\r\n      <Menu vertical size={\"large\"} style={{ width: \"100%\" }}>\r\n        <Header\r\n          icon={\"filter\"}\r\n          attached\r\n          style={{ color: \"rgb(31, 41, 90)\" }}\r\n          content={\"Filters\"}\r\n        />\r\n        <Menu.Item\r\n          color={\"blue\"}\r\n          name={\"all\"}\r\n          content={\"All Appointments\"}\r\n          onClick={() => setAllAppointmentPredicate(\"true\")}\r\n          active={allAppointmentPredicate === \"true\"}\r\n        />\r\n        <Menu.Item\r\n          color={\"blue\"}\r\n          name={\"host\"}\r\n          content={\"My Appointments\"}\r\n          onClick={() => setAllAppointmentPredicate(\"false\")}\r\n          active={allAppointmentPredicate === \"false\"}\r\n        />\r\n      </Menu>\r\n\r\n      <Menu vertical size={\"large\"} style={{ width: \"100%\" }}>\r\n        <Header\r\n          style={{ color: \"rgb(31, 41, 90)\" }}\r\n          icon={\"calendar\"}\r\n          attached\r\n          content={\"Pick a start date\"}\r\n        />\r\n        <Calendar\r\n          onChange={(date) => setDatePredicate(date!)}\r\n          value={datePredicate}\r\n        />\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(AppointmentFilters);\r\n","export const labelColors: any = {\r\n    Upcomming : \"green\",\r\n    Rejected : \"red\",\r\n    Completed : \"olive\" \r\n}","import { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Grid, Header, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { labelColors } from \"../../../app/common/options/labelColors\";\r\nimport { IAppointment } from \"../../../app/models/appointment\";\r\n\r\nconst AppointmentCard: React.FC<{ appointment: IAppointment }> = ({\r\n  appointment,\r\n}) => {\r\n  const shortenText = (text: string, maxLength: number) => {\r\n    const length = maxLength > text?.length ? text?.length || 0 : maxLength;\r\n    return text?.substr(0, length) + \"...\";\r\n  };\r\n  return (\r\n    <Link to={`/appointments/${appointment.id}`}>\r\n      <Segment style={{marginBottom: '10px'}}>\r\n        <Grid columns={2} verticalAlign=\"middle\">\r\n          <Grid.Column>\r\n            <Label\r\n              color={labelColors[appointment.status]}\r\n              horizontal\r\n              style={{ margin: 0 }}\r\n            >\r\n              {appointment.status}\r\n            </Label>\r\n            <Header as=\"h3\" style={{ margin: \"10px 0px 0px 0px\" }}>\r\n              <Icon name=\"clock outline\" />\r\n              {format(new Date(appointment.date), \"h:mm a\")}\r\n            </Header>\r\n            <Header as=\"h3\" style={{ margin: \"7px 0px 0px 0px\" }}>\r\n              <Icon name=\"user md\" />\r\n              {appointment.doctor?.firstName} {appointment.doctor?.lastName}\r\n            </Header>\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Item.Group>\r\n              <Item>\r\n                <Item.Image\r\n                  size=\"tiny\"\r\n                  circular\r\n                  src={`https://react.semantic-ui.com/images/avatar/large/${\r\n                    appointment.patient?.gender === \"Male\" ? \"matthew\" : \"molly\"\r\n                  }.png`}\r\n                />\r\n                <Item.Content>\r\n                  <Item.Header\r\n                    as={Link}\r\n                    to={`/patients/${appointment.patient?.id}`}\r\n                  >\r\n                    {appointment.patient?.firstName}{\" \"}\r\n                    {appointment.patient?.lastName}\r\n                  </Item.Header>\r\n                  <Item.Extra style={{ marginTop: 2 }}>\r\n                    <strong>Gender:</strong>\r\n                    {appointment.patient?.gender}\r\n                  </Item.Extra>\r\n                  <Item.Extra style={{ marginTop: 1 }}>\r\n                    <strong>Age:</strong>\r\n                    {new Date().getFullYear() -\r\n                      new Date(\r\n                        appointment.patient?.birthDate || new Date()\r\n                      ).getFullYear()}\r\n                  </Item.Extra>\r\n                  <Item.Extra style={{ marginTop: 1 }}>\r\n                    <strong>Reason:</strong>\r\n                    {shortenText(appointment.reason, 15)}\r\n                  </Item.Extra>\r\n                </Item.Content>\r\n              </Item>\r\n            </Item.Group>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default AppointmentCard;\r\n","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\nexport const LoadingComponent: React.FC<{\r\n  inverted?: boolean;\r\n  content?: string;\r\n}> = ({ inverted = true, content }) => {\r\n  return (\r\n    <Dimmer active inverted={inverted}>\r\n      <Loader content={content} />\r\n    </Dimmer>\r\n  );\r\n};\r\n","import React, { Fragment, useContext } from \"react\";\r\nimport { Item, Label } from \"semantic-ui-react\";\r\nimport { format } from \"date-fns\";\r\nimport AppointmentCard from \"./AppointmentCard\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { LoadingComponent } from \"../../../app/layout/LoadingComponent\";\r\n\r\nconst AppointmentList = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    appointmentsByDate,\r\n    fetchingAppointments,\r\n  } = rootStore.appointmentStore;\r\n  return fetchingAppointments ? (\r\n    <LoadingComponent content=\"loading\" />\r\n  ) : (\r\n    <div className=\"appointmentList\">\r\n      {appointmentsByDate?.map(([group, appointments]) => (\r\n        <Fragment key={group}>\r\n          <Label size=\"large\" color=\"blue\" style={{ marginTop: \"15px\" }}>\r\n            {format(new Date(group), \"eeee do MMMM yyyy\")}\r\n          </Label>\r\n          <Item.Group divided>\r\n            {appointments?.map((appointment) => (\r\n              <AppointmentCard appointment={appointment} key={appointment.id} />\r\n            ))}\r\n          </Item.Group>\r\n        </Fragment>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(AppointmentList);\r\n","import React from \"react\";\r\nimport { FieldRenderProps } from \"react-final-form\";\r\nimport { FormFieldProps, Form, Label, Dropdown } from \"semantic-ui-react\";\r\n\r\ninterface IProps extends FieldRenderProps<any>, FormFieldProps {}\r\n\r\nexport const DropdownInput: React.FC<IProps> = ({\r\n  input,\r\n  width,\r\n  options,\r\n  readOnly,\r\n  label,\r\n  search,\r\n  selection,\r\n  placeholder,\r\n  meta: { touched, error },\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} width={width}>\r\n      {label && <label>{label}</label>}\r\n      <Dropdown\r\n        value={input.value}\r\n        disabled={readOnly}\r\n        onChange={(e, data) => input.onChange(data.value)}\r\n        placeholder={placeholder}\r\n        options={options}\r\n        search={search}\r\n        selection={selection}\r\n      />\r\n      {touched && error && (\r\n        <Label\r\n          basic\r\n          color=\"red\"\r\n          style={{ margin: 0, padding: \"10px\", display: \"flex\" }}\r\n        >\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { FieldRenderProps } from \"react-final-form\";\r\nimport { FormFieldProps, Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface IProps extends FieldRenderProps<string>, FormFieldProps {}\r\n\r\nexport const TextAreaInput: React.FC<IProps> = ({\r\n  input,\r\n  width,\r\n  rows,\r\n  label,\r\n  readOnly = false,\r\n  placeholder,\r\n  meta: { touched, error },\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} width={width}>\r\n      {label && <label>{label}</label>}\r\n      <textarea rows={rows} {...input} placeholder={placeholder} disabled={readOnly} />\r\n      {touched && error && (\r\n        <Label basic color=\"red\">\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Field, Form as FinalForm } from \"react-final-form\";\r\nimport { combineValidators, isRequired } from \"revalidate\";\r\nimport { Modal, Header, Form, Button } from \"semantic-ui-react\";\r\nimport agent from \"../../../app/api/agent\";\r\nimport { DateInput } from \"../../../app/common/form/DateInput\";\r\nimport { DropdownInput } from \"../../../app/common/form/DropdownInput\";\r\nimport { TextAreaInput } from \"../../../app/common/form/TextAreaInput\";\r\nimport { combineDateAndTime } from \"../../../app/common/util/util\";\r\nimport { IAppointmentFormValues } from \"../../../app/models/appointment\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\nconst NewAppointmentForm = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createAppointment,\r\n  } = rootStore.appointmentStore;\r\n\r\n\r\n\r\n  const [doctorOptions, setDoctorOptions]: any = useState([]);\r\n  useEffect(() => {\r\n    const getOptions = async () => {\r\n      const doctors = await agent.Doctors.list();\r\n      setDoctorOptions(\r\n        doctors?.map((p) => ({\r\n          key: p.id,\r\n          value: p.id,\r\n          text: `${p.firstName} ${p.lastName}`,\r\n        }))\r\n      );\r\n    };\r\n    getOptions();\r\n  }, []);\r\n\r\n  const [patientOptions, setPatientOptions]: any = useState([]);\r\n  useEffect(() => {\r\n    const getOptions = async () => {\r\n      const patients = await agent.Patients.list(null);\r\n      setPatientOptions(\r\n        patients?.map((p) => ({\r\n          key: p.id,\r\n          value: p.id,\r\n          text: `${p.firstName} ${p.lastName}`,\r\n        }))\r\n      );\r\n    };\r\n    getOptions();\r\n  }, []);\r\n\r\n\r\n  const validate = combineValidators({\r\n    doctorId: isRequired(\"Doctor\"),\r\n    patientId: isRequired('Patient'),\r\n    date: isRequired(\"Date\"),\r\n    time: isRequired(\"Time\"),\r\n  });\r\n\r\n  const handleFinalForm = (values: any): Promise<void> => {\r\n    const appointmentValues: IAppointmentFormValues = { ...values };\r\n    console.log(appointmentValues)\r\n    appointmentValues.date = combineDateAndTime(values.date, values.time);\r\n    return createAppointment(appointmentValues);\r\n  };\r\n  return (\r\n    <Modal.Content>\r\n      <Header as=\"h1\">New Appointment</Header>\r\n      <FinalForm\r\n        validate={validate}\r\n        onSubmit={handleFinalForm}\r\n        render={({\r\n          handleSubmit,\r\n          submitting,\r\n          invalid,\r\n          pristine,\r\n          dirtySinceLastSubmit,\r\n        }) => (\r\n          <Form onSubmit={handleSubmit}>\r\n            <Field\r\n              component={DropdownInput}\r\n              label=\"Doctor\"\r\n              name=\"doctorId\"\r\n              options={doctorOptions}\r\n              placeholder=\"Choose doctor\"\r\n              search\r\n              selection\r\n            />\r\n            <Field\r\n              component={DropdownInput}\r\n              label=\"Patient\"\r\n              name=\"patientId\"\r\n              options={patientOptions}\r\n              placeholder=\"Choose patient\"\r\n              search\r\n              selection\r\n            />\r\n            <Field\r\n              component={DateInput}\r\n              label=\"Date\"\r\n              date={true}\r\n              name=\"date\"\r\n              placeholder=\"Date\"\r\n            />\r\n            <Field\r\n              component={DateInput}\r\n              label=\"Time\"\r\n              time={true}\r\n              name=\"time\"\r\n              placeholder=\"Time\"\r\n            />\r\n            <Field\r\n              component={TextAreaInput}\r\n              label=\"Reason\"\r\n              rows={3}\r\n              name=\"reason\"\r\n              placeholder=\"Reason\"\r\n            />\r\n            <Button\r\n              color=\"blue\"\r\n              content=\"Create\"\r\n              disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n              fluid\r\n              loading={submitting}\r\n            />\r\n          </Form>\r\n        )}\r\n      />\r\n    </Modal.Content>\r\n  );\r\n};\r\n\r\nexport default observer(NewAppointmentForm);\r\n","import React, { useContext } from \"react\";\r\nimport AquaButton from \"../../../app/common/buttons/AquaButton\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport NewAppointmentForm from \"./NewAppointmentForm\";\r\n\r\nconst AppointmentHeader = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { openModal } = rootStore.modalStore;\r\n  return (\r\n    <div className=\"appointmentHeader\">\r\n      <h1>Appointments</h1>\r\n      <AquaButton\r\n        content=\"+\"\r\n        onClick={() => openModal(<NewAppointmentForm />)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppointmentHeader;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport \"./AppointmentDashboard.css\";\r\nimport AppointmentFilters from \"./AppointmentFilters\";\r\nimport AppointmentList from \"./AppointmentList\";\r\nimport AppointmentHeader from \"./AppointmentHeader\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\nconst AppointmentDashboard = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { fetchAppointments } = rootStore.appointmentStore;\r\n  useEffect(() => {\r\n    fetchAppointments();\r\n  }, [fetchAppointments]);\r\n  return (\r\n    <div className=\"appointmentDashboard\">\r\n      <AppointmentHeader />\r\n      <div className=\"appointmentDashboard__content\">\r\n        <AppointmentList />\r\n        <AppointmentFilters />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppointmentDashboard;\r\n","import React, { useContext } from \"react\";\r\nimport { Button, Form, Header, Segment } from \"semantic-ui-react\";\r\nimport { Field, Form as FinalForm } from \"react-final-form\";\r\nimport { gender } from \"../../app/common/options/genderOptions\";\r\nimport { IRegisterUserFormValues } from \"../../app/models/user\";\r\nimport { TextInput } from \"../../app/common/form/TextInput\";\r\nimport { SelectInput } from \"../../app/common/form/SelectInput\";\r\nimport {\r\n  combineValidators,\r\n  composeValidators,\r\n  isAlphabetic,\r\n  isNumeric,\r\n  isRequired,\r\n} from \"revalidate\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { DateInput } from \"../../app/common/form/DateInput\";\r\nimport { combineDateAndTime } from \"../../app/common/util/util\";\r\n\r\nconst NewUserForm = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { register } = rootStore.adminStore;\r\n  const validate = combineValidators({\r\n    firstName: composeValidators(isRequired, isAlphabetic)(\"First Name\"),\r\n    lastName: composeValidators(isRequired, isAlphabetic)(\"Last Name\"),\r\n    email: composeValidators(isRequired)(\"Email\"),\r\n    birthDate: isRequired(\"Birth Date\"),\r\n    pesel: composeValidators(isRequired, isNumeric)(\"Pesel\"),\r\n    gender: composeValidators(isRequired)(\"Gender\"),\r\n  });\r\n\r\n  const handleFinalForm = (values: IRegisterUserFormValues): Promise<void> => {\r\n    values.birthDate = combineDateAndTime(values.birthDate!, values.birthDate!)\r\n    return register(values)\r\n  }\r\n\r\n  return (\r\n    <div className=\"newUserForm\">\r\n      <Segment>\r\n        <Header as=\"h1\">New Doctor</Header>\r\n        <FinalForm\r\n          validate={validate}\r\n          onSubmit={handleFinalForm}\r\n          render={({\r\n            handleSubmit,\r\n            submitting,\r\n            invalid,\r\n            pristine,\r\n            dirtySinceLastSubmit,\r\n          }) => (\r\n            <Form onSubmit={handleSubmit}>\r\n              <Field\r\n                component={TextInput}\r\n                label=\"First Name\"\r\n                name=\"firstName\"\r\n                placeholder=\"First Name\"\r\n              />\r\n              <Field\r\n                component={TextInput}\r\n                label=\"Last Name\"\r\n                name=\"lastName\"\r\n                placeholder=\"Last Name\"\r\n              />\r\n              <Field\r\n                component={TextInput}\r\n                label=\"Email\"\r\n                name=\"email\"\r\n                placeholder=\"Email\"\r\n              />\r\n              <Field\r\n                component={DateInput}\r\n                label=\"Birth Date\"\r\n                date={true}\r\n                name=\"birthDate\"\r\n                placeholder=\"Birth Date\"\r\n              />\r\n              <Field\r\n                component={TextInput}\r\n                label=\"Pesel\"\r\n                name=\"pesel\"\r\n                placeholder=\"Pesel\"\r\n              />\r\n              <Field\r\n                component={SelectInput}\r\n                label=\"Gender\"\r\n                name=\"gender\"\r\n                placeholder=\"Gender\"\r\n                options={gender}\r\n              />\r\n              <Button\r\n                color=\"blue\"\r\n                content=\"Create\"\r\n                fluid\r\n                loading={submitting}\r\n                disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n              />\r\n            </Form>\r\n          )}\r\n        />\r\n      </Segment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(NewUserForm);\r\n","import React, { useContext } from \"react\";\r\nimport { Button, Icon, Modal } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../stores/rootStore\";\r\n\r\ninterface IProps {\r\n  header: string;\r\n  message: string;\r\n  callback: () => void;\r\n}\r\nconst ConfirmationModal: React.FC<IProps> = ({ header, message, callback }) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { closeModal } = rootStore.modalStore;\r\n  return (\r\n    <>\r\n      <Modal.Header>{header}</Modal.Header>\r\n      <Modal.Content>{message}</Modal.Content>\r\n      <Modal.Actions>\r\n        <Button color='green' onClick={callback}>\r\n          <Icon name='remove' /> Yes\r\n        </Button>\r\n        <Button color='red' onClick={closeModal}>\r\n          <Icon name='checkmark' /> No\r\n        </Button>\r\n      </Modal.Actions>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useEffect, useRef } from \"react\";\r\nimport { Segment, Header, Dropdown, Button } from \"semantic-ui-react\";\r\nimport ConfirmationModal from \"../../app/common/modals/ConfirmationModal\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\n\r\nconst UserActions = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    loadUsers,\r\n    fetchingUsers,\r\n    userOptions,\r\n    resetPassword,\r\n    deleteUser,\r\n  } = rootStore.adminStore;\r\n  const { openModal, closeModal } = rootStore.modalStore;\r\n\r\n  const dropdownElement: any = useRef(null);\r\n\r\n  useEffect(() => {\r\n    loadUsers();\r\n  }, [loadUsers]);\r\n\r\n  const handleResetPassword = () => {\r\n    const userId = dropdownElement?.current?.state?.value;\r\n    if (userId) {\r\n      openModal(\r\n        <ConfirmationModal\r\n          header=\"Confirmation\"\r\n          message=\"Are you sure you want to reset password?\"\r\n          callback={() => {\r\n            resetPassword(userId);\r\n            closeModal();\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleDeleteUser = () => {\r\n    const userId = dropdownElement?.current?.state?.value;\r\n    if (userId) {\r\n      openModal(\r\n        <ConfirmationModal\r\n          header=\"Confirmation\"\r\n          message=\"Are you sure you want to delete this user?\"\r\n          callback={() => {\r\n            deleteUser(userId);\r\n            closeModal();\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"userActions\">\r\n      <Segment>\r\n        <Header as=\"h1\">User Actions</Header>\r\n        <Dropdown\r\n          options={userOptions}\r\n          fluid\r\n          placeholder=\"Choose User\"\r\n          ref={dropdownElement}\r\n          loading={fetchingUsers}\r\n          search\r\n        />\r\n        <Button.Group widths={4} style={{ marginTop: 20 }}>\r\n          <Button\r\n            content=\"Reset Password\"\r\n            fluid\r\n            onClick={handleResetPassword}\r\n          />\r\n          <Button.Or />\r\n          <Button\r\n            content=\"Delete User\"\r\n            fluid\r\n            color=\"red\"\r\n            onClick={handleDeleteUser}\r\n          />\r\n        </Button.Group>\r\n      </Segment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(UserActions);\r\n","import React from \"react\";\r\nimport \"./AdminDashboard.css\";\r\nimport NewUserForm from \"./NewUserForm\";\r\nimport UserActions from \"./UserActions\";\r\n\r\nconst AdminDashboard = () => {\r\n\r\n  return (\r\n    <div className=\"adminDashboard\">\r\n      <NewUserForm/>\r\n      <UserActions/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport {\r\n  Redirect,\r\n  Route,\r\n  RouteComponentProps,\r\n  RouteProps,\r\n} from \"react-router-dom\";\r\nimport { RootStoreContext } from \"../stores/rootStore\";\r\n\r\ninterface IProps extends RouteProps {\r\n  component: React.ComponentType<RouteComponentProps<any>>;\r\n}\r\n\r\nconst PrivateRoute: React.FC<IProps> = ({ component: Component, ...rest }) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { isUserLoggedIn } = rootStore.userStore;\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        isUserLoggedIn ? <Component {...props} /> : <Redirect to={\"/\"} />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default observer(PrivateRoute);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Dropdown } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\n\r\nconst AvatarDropdown = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { user, logout } = rootStore.userStore;\r\n  return (\r\n    <div className=\"app__avatar\">\r\n      {user && (\r\n        <Dropdown text={user.displayName} pointing=\"top right\">\r\n          <Dropdown.Menu>\r\n            <Dropdown.Item as={Link} to=\"/settings\">Settings</Dropdown.Item>\r\n            <Dropdown.Item onClick={logout}>Logout</Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(AvatarDropdown);\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { useContext } from 'react'\r\nimport { Modal } from 'semantic-ui-react'\r\nimport { RootStoreContext } from '../../stores/rootStore'\r\n\r\nconst ModalContainer = () => {\r\n    const rootStore = useContext(RootStoreContext)\r\n    const {modal: {body, open}, closeModal} = rootStore.modalStore\r\n    return (\r\n        <Modal open={open} onClose={closeModal}>\r\n            {body}\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default observer(ModalContainer)\r\n","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Grid, Header, Icon, Label, Segment } from \"semantic-ui-react\";\r\nimport { labelColors } from \"../../../app/common/options/labelColors\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\nconst PatientDetailedAppointments = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { appointments } = rootStore.patientStore.patient!;\r\n  return (\r\n    <div className=\"patientDetailedAppointments__container\">\r\n      {appointments.map((appointment) => (\r\n        <Link to={`/appointments/${appointment.id}`} key={appointment.id}>\r\n          <Segment.Group style={{ cursor: \"pointer\", marginBottom: '10px' }} key={appointment.id}>\r\n            <Segment>\r\n              <Grid columns={3}>\r\n                <Grid.Column>\r\n                  <Header as=\"h3\" style={{ margin: 0 }}>\r\n                    <Icon name=\"clock outline\" />\r\n                    <Header.Content>\r\n                      {format(new Date(appointment.date), \"h:mm a\")}\r\n                  </Header.Content>\r\n                  </Header>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Header as=\"h3\" style={{ margin: 0 }}>\r\n                    <Icon name=\"calendar alternate outline\" />\r\n                    <Header.Content>\r\n                      {format(new Date(appointment.date), \"dd-MM-yyyy\")}\r\n                    </Header.Content>\r\n                  </Header>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Label color={labelColors[appointment.status]} horizontal>\r\n                    {appointment.status}\r\n                  </Label>\r\n                </Grid.Column>\r\n              </Grid>\r\n            </Segment>\r\n            <Segment>\r\n              <Grid columns={4}>\r\n                <Grid.Column>\r\n                  <Header as=\"h4\" sub>\r\n                    Doctor:\r\n                  </Header>\r\n                  <span>\r\n                    {appointment.doctor?.firstName}{\" \"}\r\n                    {appointment.doctor?.lastName}\r\n                  </span>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Header as=\"h4\" sub>\r\n                    Reason:\r\n                  </Header>\r\n                  <span>{appointment.reason}</span>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Header as=\"h4\" sub>\r\n                    Description:\r\n                  </Header>\r\n                  <span>{appointment.description}</span>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Header as=\"h4\" sub>\r\n                    Conditions:\r\n                  </Header>\r\n                  <Label.Group color=\"black\" size=\"mini\">\r\n                    {appointment.conditions?.map((condition) => (\r\n                      <Label as=\"a\">{condition.name}</Label>\r\n                    ))}\r\n                  </Label.Group>\r\n                </Grid.Column>\r\n              </Grid>\r\n            </Segment>\r\n          </Segment.Group>\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(PatientDetailedAppointments);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { Field, Form as FinalForm } from \"react-final-form\";\r\nimport {\r\n  combineValidators,\r\n  composeValidators,\r\n  isRequired,\r\n  isAlphabetic,\r\n  isNumeric,\r\n} from \"revalidate\";\r\nimport { Button, Checkbox, Form, Header, Tab } from \"semantic-ui-react\";\r\nimport { DateInput } from \"../../../app/common/form/DateInput\";\r\nimport { SelectInput } from \"../../../app/common/form/SelectInput\";\r\nimport { TextInput } from \"../../../app/common/form/TextInput\";\r\nimport { gender } from \"../../../app/common/options/genderOptions\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\nconst PatientDetailedData = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { patient, updatePatient } = rootStore.patientStore;\r\n  const [edit, setEdit] = useState(false);\r\n  const validate = combineValidators({\r\n    firstName: composeValidators(isRequired, isAlphabetic)(\"First Name\"),\r\n    lastName: composeValidators(isRequired, isAlphabetic)(\"Last Name\"),\r\n    pesel: composeValidators(isRequired, isNumeric)(\"Pesel\"),\r\n  });\r\n  const handleFinalForm = (values: any): Promise<void> => updatePatient(values);\r\n\r\n  return (\r\n    <Tab.Pane>\r\n      <div className=\"patientDetailedData\">\r\n        <div className=\"patientDetailedData__header\">\r\n          <Header as=\"h4\" style={{ margin: 0 }}>\r\n            Mode:\r\n          </Header>\r\n          <Header\r\n            as=\"h4\"\r\n            color=\"grey\"\r\n            style={{ margin: \"0\", marginLeft: \"3px\" }}\r\n          >\r\n            {edit ? \"Edit\" : \"Display\"}\r\n          </Header>\r\n          <Checkbox\r\n            toggle\r\n            style={{ marginLeft: \"auto\" }}\r\n            onChange={() => setEdit(!edit)}\r\n            checked={edit}\r\n          />\r\n        </div>\r\n        {patient && (\r\n          <div className=\"patientDetailedData__info\">\r\n            <FinalForm\r\n              validate={validate}\r\n              initialValues={patient}\r\n              onSubmit={handleFinalForm}\r\n              render={({\r\n                handleSubmit,\r\n                submitting,\r\n                invalid,\r\n                pristine,\r\n                dirtySinceLastSubmit,\r\n              }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                  <Field\r\n                    component={TextInput}\r\n                    label=\"Pesel\"\r\n                    value={patient.pesel}\r\n                    readOnly={!edit}\r\n                    name=\"pesel\"\r\n                    placeholder=\"Pesel\"\r\n                  />\r\n                  <Field\r\n                    component={TextInput}\r\n                    label=\"First Name\"\r\n                    value={patient.firstName}\r\n                    readOnly={!edit}\r\n                    name=\"firstName\"\r\n                    placeholder=\"First Name\"\r\n                  />\r\n                  <Field\r\n                    component={TextInput}\r\n                    label=\"Last Name\"\r\n                    value={patient.lastName}\r\n                    readOnly={!edit}\r\n                    name=\"lastName\"\r\n                    placeholder=\"Last Name\"\r\n                  />\r\n                  <Field\r\n                    component={DateInput}\r\n                    label=\"Birth Date\"\r\n                    value={new Date(patient.birthDate)}\r\n                    readOnly={!edit}\r\n                    date={true}\r\n                    time={false}\r\n                    name=\"birthDate\"\r\n                    placeholder=\"Birth Date\"\r\n                  />\r\n                  <Field\r\n                    component={SelectInput}\r\n                    label=\"Gender\"\r\n                    value={patient.gender}\r\n                    readOnly={!edit}\r\n                    name=\"gender\"\r\n                    placeholder=\"Gender\"\r\n                    options={gender}\r\n                  />\r\n                  {edit ? (\r\n                    <Button\r\n                      color=\"blue\"\r\n                      disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n                      loading={submitting}\r\n                      content=\"Update\"\r\n                      fluid\r\n                    />\r\n                  ) : (\r\n                    <div />\r\n                  )}\r\n                </Form>\r\n              )}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(PatientDetailedData);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Tab } from \"semantic-ui-react\";\r\nimport ConfirmationModal from \"../../../app/common/modals/ConfirmationModal\";\r\nimport { LoadingComponent } from \"../../../app/layout/LoadingComponent\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport PatientDetailedAppointments from \"./PatientDetailedAppointments\";\r\nimport PatientDetailedData from \"./PatientDetailedData\";\r\nimport \"./PatientDetails.css\";\r\n\r\nconst panes = [\r\n  {\r\n    menuItem: { content: \"Details\", icon: \"user\" },\r\n    render: () => <PatientDetailedData />,\r\n  },\r\n  {\r\n    menuItem: { content: \"Appointments\", icon: \"calendar\" },\r\n    render: () => <PatientDetailedAppointments />,\r\n  },\r\n];\r\n\r\ninterface IProps {\r\n  id: string;\r\n}\r\n\r\nconst PatientDetails: React.FC<RouteComponentProps<IProps>> = ({ match }) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { loadPatient, patient, deletePatient } = rootStore.patientStore;\r\n  const { openModal, closeModal } = rootStore.modalStore;\r\n  const handleDeletePatient = () => {\r\n    openModal(\r\n      <ConfirmationModal\r\n        header=\"Confirmation\"\r\n        message=\"Are you sure you want to delete this user?\"\r\n        callback={() => {\r\n          deletePatient(patient!.id);\r\n          closeModal();\r\n        }}\r\n      />\r\n    );\r\n  };\r\n  \r\n  useEffect(() => {\r\n    loadPatient(parseInt(match.params.id));\r\n  }, [loadPatient, match]);\r\n\r\n  if (!patient) {\r\n    return <LoadingComponent content=\"Loading patient\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"patientDetails\">\r\n      <div className=\"patientDetails__header\">\r\n        <Header as=\"h1\" style={{ margin: 0 }}>\r\n          {patient.firstName} {patient.lastName}\r\n        </Header>\r\n        <Button negative icon size=\"large\" onClick={handleDeletePatient}>\r\n          <Icon name=\"trash alternate outline\" />\r\n        </Button>\r\n      </div>\r\n      <div className=\"patientDetails__data\">\r\n        <Tab\r\n          menu={{ fluid: true, vertical: true }}\r\n          menuPosition=\"right\"\r\n          panes={panes}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(PatientDetails);\r\n","import React from \"react\";\r\nimport { Button, Header, Icon } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <Header icon>\r\n        <Icon name=\"search\" />\r\n        Oops - we've looked everywhere but couldn't find this.\r\n      </Header>\r\n      <Button as={Link} to=\"/dashboard\" primary>\r\n        Return to Dashboard\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { Header, Button, Icon } from \"semantic-ui-react\";\r\nimport ConfirmationModal from \"../../../app/common/modals/ConfirmationModal\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\nconst AppointmentDetailedHeader = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { deleteAppointment, appointment } = rootStore.appointmentStore;\r\n  const { openModal, closeModal } = rootStore.modalStore;\r\n\r\n  const handleDeleteAppointment = () => {\r\n    openModal(\r\n      <ConfirmationModal\r\n        header=\"Confirmation\"\r\n        message=\"Are you sure you want to delete this appointment?\"\r\n        callback={() => {\r\n          deleteAppointment(appointment!.id!);\r\n          closeModal();\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"appointmentDetails__header\">\r\n      <Header as=\"h1\" style={{ margin: 0 }}>\r\n        Appointment\r\n      </Header>\r\n      <Button negative icon size=\"large\" onClick={handleDeleteAppointment}>\r\n        <Icon name=\"trash alternate outline\" />\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(AppointmentDetailedHeader);\r\n","import React from \"react\";\r\nimport { Checkbox, Header } from \"semantic-ui-react\";\r\n\r\ninterface IProps {\r\n  edit: boolean;\r\n  setEdit: (edit: boolean) => void;\r\n}\r\nconst AppointmentDetailedMode: React.FC<IProps> = ({ edit, setEdit }) => {\r\n  return (\r\n    <div className=\"appointmentDetails__mode\">\r\n      <Header as=\"h4\" style={{ margin: 0 }}>\r\n        Mode:\r\n      </Header>\r\n      <Header as=\"h4\" color=\"grey\" style={{ margin: \"0\", marginLeft: \"3px\" }}>\r\n        {edit ? \"Edit\" : \"Display\"}\r\n      </Header>\r\n      <Checkbox\r\n        toggle\r\n        style={{ marginLeft: \"auto\" }}\r\n        value={edit.toString()}\r\n        onChange={() => setEdit(!edit)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppointmentDetailedMode;\r\n","export const status = [\r\n    { key: 'upcomming', text: 'Upcomming', value: 'Upcomming' },\r\n    { key: 'completed', text: 'Completed', value: 'Completed' },\r\n    { key: 'rejected', text: 'Rejected', value: 'Rejected' }\r\n  ];","import { combineDateAndTime } from \"../common/util/util\";\r\nimport { ICondition } from \"./conditions\";\r\nimport { IPatient } from \"./patient\";\r\nimport { IUser } from \"./user\";\r\n\r\nexport interface IAppointment {\r\n  id: number;\r\n  status: string;\r\n  date: Date;\r\n  reason: string;\r\n  description: string;\r\n  patient?: IPatient;\r\n  doctor?: IUser;\r\n  conditions?: ICondition[];\r\n}\r\n\r\nexport interface IAppointmentFormValues extends Partial<IAppointment> {\r\n  patientId: number;\r\n  doctorId: string;\r\n  time?: Date;\r\n}\r\n\r\nexport class UpdateAppointmentFormValues {\r\n  id: number;\r\n  patientId: number;\r\n  doctorId: string;\r\n  date?: Date;\r\n  status: string;\r\n  reason: string;\r\n  description: string;\r\n  constructor(init: AppointmentFormValues) {\r\n    this.id = init.id;\r\n    this.patientId = init.patientId;\r\n    this.doctorId = init.doctorId;\r\n    this.date = combineDateAndTime(new Date(init.date!), new Date(init.time!));\r\n    this.status = init.status;\r\n    this.reason = init.reason;\r\n    this.description = init.description;\r\n  }\r\n}\r\n\r\nexport class AppointmentFormValues implements IAppointmentFormValues {\r\n  patientId: number = -1;\r\n  doctorId: string = \"\";\r\n  id: number = -1;\r\n  status: string = \"\";\r\n  date?: Date = undefined;\r\n  time?: Date = undefined;\r\n  reason: string = \"\";\r\n  description: string = \"\";\r\n\r\n  constructor(init?: IAppointmentFormValues) {\r\n    Object.assign(this, init);\r\n    if (init && init.date) {\r\n      this.time = init.date;\r\n    }\r\n    if (init && init.doctor) {\r\n      this.doctorId = init.doctor.id;\r\n    }\r\n    if (init && init.patient) {\r\n      this.patientId = init.patient.id;\r\n    }\r\n  }\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Field, Form as FinalForm } from \"react-final-form\";\r\nimport {\r\n  combineValidators,\r\n  isRequired,\r\n} from \"revalidate\";\r\nimport { Form, Button } from \"semantic-ui-react\";\r\nimport agent from \"../../../app/api/agent\";\r\nimport { DateInput } from \"../../../app/common/form/DateInput\";\r\nimport { DropdownInput } from \"../../../app/common/form/DropdownInput\";\r\nimport { SelectInput } from \"../../../app/common/form/SelectInput\";\r\nimport { TextAreaInput } from \"../../../app/common/form/TextAreaInput\";\r\nimport { status } from \"../../../app/common/options/statusOptions\";\r\nimport { LoadingComponent } from \"../../../app/layout/LoadingComponent\";\r\nimport {\r\n  AppointmentFormValues,\r\n  UpdateAppointmentFormValues,\r\n} from \"../../../app/models/appointment\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\nconst AppointmentDetailedForm: React.FC<{\r\n  edit: boolean;\r\n}> = ({ edit }) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { appointment, updateAppointment } = rootStore.appointmentStore;\r\n\r\n  const [doctorOptions, setDoctorOptions]: any = useState([]);\r\n  useEffect(() => {\r\n    const getOptions = async () => {\r\n      const doctors = await agent.Doctors.list();\r\n      setDoctorOptions(\r\n        doctors?.map((p) => ({\r\n          key: p.id,\r\n          value: p.id,\r\n          text: `${p.firstName} ${p.lastName}`,\r\n        }))\r\n      );\r\n    };\r\n    getOptions();\r\n  }, []);\r\n\r\n  const [patientOptions, setPatientOptions]: any = useState([]);\r\n  useEffect(() => {\r\n    const getOptions = async () => {\r\n      const patients = await agent.Patients.list(null);\r\n      setPatientOptions(\r\n        patients?.map((p) => ({\r\n          key: p.id,\r\n          value: p.id,\r\n          text: `${p.firstName} ${p.lastName}`,\r\n        }))\r\n      );\r\n    };\r\n    getOptions();\r\n  }, []);\r\n\r\n  const [appointmentFormValues, setAppointmentFormValues] = useState(\r\n    new AppointmentFormValues()\r\n  );\r\n  useEffect(() => {\r\n    setAppointmentFormValues(new AppointmentFormValues(appointment! as any));\r\n  }, [appointment]);\r\n\r\n  const validate = combineValidators({\r\n    doctorId: isRequired(\"Doctor\"),\r\n    patientId: isRequired(\"Patient\"),\r\n    date: isRequired(\"Date\"),\r\n    time: isRequired(\"Time\"),\r\n    status: isRequired(\"Status\"),\r\n  });\r\n\r\n  const handleFinalFormSubmit = (\r\n    values: AppointmentFormValues\r\n  ): Promise<void> => {\r\n    const appointmentValues = new UpdateAppointmentFormValues(values);\r\n    console.log(appointmentValues);\r\n    return updateAppointment(appointmentValues);\r\n  };\r\n\r\n  if (doctorOptions.length === 0 || patientOptions.length === null) {\r\n    return <LoadingComponent />;\r\n  } else\r\n    return (\r\n      <div className=\"appointmentDetails__basic\">\r\n        <FinalForm\r\n          validate={validate}\r\n          initialValues={appointmentFormValues}\r\n          onSubmit={handleFinalFormSubmit}\r\n          render={({\r\n            handleSubmit,\r\n            submitting,\r\n            invalid,\r\n            pristine,\r\n            dirtySinceLastSubmit,\r\n          }) => (\r\n            <Form onSubmit={handleSubmit}>\r\n              <Field\r\n                readOnly={!edit}\r\n                component={DropdownInput}\r\n                label=\"Doctor\"\r\n                name=\"doctorId\"\r\n                initialValue={appointmentFormValues?.doctorId}\r\n                value={appointmentFormValues?.doctorId}\r\n                options={doctorOptions}\r\n                search\r\n                selection\r\n              />\r\n              <Field\r\n                component={DropdownInput}\r\n                readOnly={!edit}\r\n                label=\"Patient\"\r\n                name=\"patientId\"\r\n                initialValue={appointmentFormValues?.patientId}\r\n                value={appointmentFormValues?.patientId}\r\n                options={patientOptions}\r\n                search\r\n                selection\r\n              />\r\n              <Field\r\n                component={DateInput}\r\n                date={true}\r\n                readOnly={!edit}\r\n                name=\"date\"\r\n                label=\"Date\"\r\n                value={appointmentFormValues?.date}\r\n              />\r\n              <Field\r\n                component={DateInput}\r\n                time={true}\r\n                readOnly={!edit}\r\n                name=\"time\"\r\n                label=\"Time\"\r\n                value={appointmentFormValues?.time}\r\n              />\r\n              <Field\r\n                component={SelectInput}\r\n                name=\"status\"\r\n                label=\"Status\"\r\n                readOnly={!edit}\r\n                value={appointmentFormValues?.status}\r\n                options={status}\r\n              />\r\n              <Field\r\n                component={TextAreaInput}\r\n                name=\"reason\"\r\n                readOnly={!edit}\r\n                value={appointmentFormValues?.reason}\r\n                label=\"Reason\"\r\n                rows={2}\r\n              />\r\n              <Field\r\n                component={TextAreaInput}\r\n                name=\"description\"\r\n                readOnly={!edit}\r\n                label=\"Description\"\r\n                value={appointmentFormValues?.description}\r\n                rows={3}\r\n              />\r\n              <Button\r\n                color=\"blue\"\r\n                fluid\r\n                disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n                loading={submitting}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default observer(AppointmentDetailedForm);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Header, Label, Icon, Input, Button } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\nconst AppointmentDetailedConditions: React.FC<{ edit: boolean }> = ({\r\n  edit,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const [conditionName, setConditionName] = useState(\"\");\r\n  const [requiredLength, setRequiredLength] = useState(false);\r\n  const {\r\n    appointment,\r\n    connectCondtion,\r\n    disconnectCondition,\r\n    deletingConditionId,\r\n    loadingCondition,\r\n  } = rootStore.appointmentStore;\r\n\r\n  const handleAddCondition = () => {\r\n    if (requiredLength) {\r\n      connectCondtion(conditionName);\r\n      setConditionName(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setRequiredLength(conditionName.length >= 3);\r\n  }, [conditionName]);\r\n\r\n  const handleDeleteCondition = (id: number) => {\r\n    disconnectCondition(id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"appointmentDetails__conditions\">\r\n      <Header as=\"h5\" style={{ margin: 0, padding: 0 }}>\r\n        Conditions\r\n      </Header>\r\n      <div className=\"conditions__list\">\r\n        {appointment?.conditions?.map((condition) => (\r\n          <div className=\"conditionListItem\" key={condition.id}>\r\n            <Label color={`${!edit ? \"grey\" : \"blue\"}` as any}>\r\n              {condition.name}\r\n              <Icon\r\n                disabled={!edit}\r\n                onClick={() => handleDeleteCondition(condition.id)}\r\n                name=\"close\"\r\n                loading={deletingConditionId === condition.id}\r\n              />\r\n            </Label>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"conditions__input\">\r\n        <Input \r\n          style={{ flex: 1 }}\r\n          disabled={!edit}\r\n          type='text'\r\n          placeholder='Condition'\r\n          action\r\n          value={conditionName}\r\n          onChange={(e) => setConditionName(e.currentTarget.value)}\r\n        >\r\n          <input/>\r\n          <Button\r\n            type='submit'\r\n            disabled={!edit && requiredLength}\r\n            loading={loadingCondition}\r\n            onClick={handleAddCondition}\r\n          >\r\n            Add\r\n          </Button>\r\n        </Input>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(AppointmentDetailedConditions);\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { LoadingComponent } from \"../../../app/layout/LoadingComponent\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport \"./AppointmentDetails.css\";\r\nimport AppointmentDetailedHeader from \"./AppointmentDetailedHeader\";\r\nimport AppointmentDetailedMode from \"./AppointmentDetailedMode\";\r\nimport AppointmentDetailedForm from \"./AppointmentDetailedForm\";\r\nimport AppointmentDetailedConditions from \"./AppointmentDetailedConditions\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\ninterface IProps {\r\n  id: string;\r\n}\r\nconst AppointmentDetails: React.FC<RouteComponentProps<IProps>> = ({\r\n  match,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    loadAppointment,\r\n    loadingAppointment,\r\n  } = rootStore.appointmentStore;\r\n\r\n  const [edit, setEdit] = useState(false);\r\n  useEffect(() => {\r\n    loadAppointment(parseInt(match.params.id));\r\n  }, [loadAppointment, match]);\r\n\r\n  return loadingAppointment ? (\r\n    <LoadingComponent content=\"Loading appointment\" />\r\n  ) : (\r\n    <div className=\"appointmentDetails\">\r\n      <AppointmentDetailedHeader />\r\n      <AppointmentDetailedMode edit={edit} setEdit={setEdit} />\r\n      <div className=\"appointmentDetails__data\">\r\n        <AppointmentDetailedForm edit={edit} />\r\n        <AppointmentDetailedConditions edit={edit}/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(AppointmentDetails);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { Field, Form as FinalForm } from \"react-final-form\";\r\nimport {\r\n  combineValidators,\r\n  composeValidators,\r\n  isAlphabetic,\r\n  isNumeric,\r\n  isRequired,\r\n} from \"revalidate\";\r\nimport { Button, Form, Grid, Header, Segment } from \"semantic-ui-react\";\r\nimport { TextInput } from \"../../app/common/form/TextInput\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\n\r\nconst AccountDetailsForm = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { user, updateAccount } = rootStore.userStore;\r\n  const validate = combineValidators({\r\n    firstName: composeValidators(isRequired, isAlphabetic)(\"First Name\"),\r\n    lastName: composeValidators(isRequired, isAlphabetic)(\"Last Name\"),\r\n    email: composeValidators(isRequired)(\"Email\"),\r\n    pesel: composeValidators(isRequired, isNumeric)(\"Pesel\"),\r\n  });\r\n  const handleSubmitFinalForm = (values: any) => {\r\n    return updateAccount(values);\r\n  };\r\n  return (\r\n    <Grid.Column>\r\n      <Segment>\r\n        <Header as=\"h1\">Account</Header>\r\n        <FinalForm\r\n          validate={validate}\r\n          initialValues={user}\r\n          onSubmit={handleSubmitFinalForm}\r\n          render={({\r\n            handleSubmit,\r\n            submitting,\r\n            invalid,\r\n            pristine,\r\n            dirtySinceLastSubmit,\r\n          }) => (\r\n            <Form onSubmit={handleSubmit}>\r\n              <Field\r\n                component={TextInput}\r\n                name=\"firstName\"\r\n                placeholder=\"First Name\"\r\n                label=\"First Name\"\r\n                value={user?.firstName}\r\n              />\r\n              <Field\r\n                component={TextInput}\r\n                name=\"lastName\"\r\n                placeholder=\"Last Name\"\r\n                label=\"Last Name\"\r\n                value={user?.lastName}\r\n              />\r\n              <Field\r\n                component={TextInput}\r\n                name=\"pesel\"\r\n                placeholder=\"Pesel\"\r\n                label=\"Pesel\"\r\n                value={user?.pesel}\r\n              />\r\n              <Field\r\n                component={TextInput}\r\n                name=\"email\"\r\n                placeholder=\"Email\"\r\n                label=\"Email\"\r\n                value={user?.email}\r\n              />\r\n              <Button\r\n                fluid\r\n                color=\"blue\"\r\n                loading={submitting}\r\n                disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        />\r\n      </Segment>\r\n    </Grid.Column>\r\n  );\r\n};\r\n\r\nexport default observer(AccountDetailsForm);\r\n","import React from \"react\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface IProps {\r\n  error: AxiosResponse;\r\n}\r\n\r\nexport const AdvancedErrorMessage: React.FC<IProps> = ({ error }) => {\r\n  return (\r\n    <Message>\r\n      <Message.Header>{error.statusText}</Message.Header>\r\n      {error?.data?.errors?.Password.map((e: any) => (\r\n        <Message.Content content={e.Description} />\r\n      ))}\r\n    </Message>\r\n  );\r\n};\r\n","import { AxiosResponse } from \"axios\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Form, Grid, Header, Label, Segment } from \"semantic-ui-react\";\r\nimport { AdvancedErrorMessage } from \"../../app/common/form/AdvancedErrorMessage\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\n\r\nconst ChangePasswordForm = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { changePassword, changingPassword } = rootStore.userStore;\r\n  const [currentPassword, setCurrentPassword] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [repeatedNewPassword, setRepeatedNewPassword] = useState(\"\");\r\n  const [localError, setLocalError] = useState<string | null>(null);\r\n  const [error, setError] = useState<AxiosResponse<any> | null>(null);\r\n\r\n  const handleChangePassword = () => {\r\n    if (newPassword !== repeatedNewPassword) {\r\n      setLocalError(\"New password doest not match with repeted\");\r\n    } else if (newPassword.length === 0) {\r\n      setLocalError(\"New password cannot be empty\");\r\n    } else {\r\n      changePassword(currentPassword, newPassword).catch((e) => {\r\n        setError(e);\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setError(null);\r\n    setLocalError(null);\r\n  }, [currentPassword, newPassword, repeatedNewPassword]);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Segment>\r\n        <Header as=\"h1\">Password</Header>\r\n        <Form>\r\n          <Form.Field>\r\n            <label>Current Password</label>\r\n            <input\r\n              type=\"password\"\r\n              value={currentPassword}\r\n              onChange={(e) => setCurrentPassword(e.currentTarget.value)}\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>New Password</label>\r\n            <input\r\n              type=\"password\"\r\n              value={newPassword}\r\n              onChange={(e) => setNewPassword(e.currentTarget.value)}\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Confirm New Password</label>\r\n            <input\r\n              type=\"password\"\r\n              value={repeatedNewPassword}\r\n              onChange={(e) => setRepeatedNewPassword(e.currentTarget.value)}\r\n            />\r\n            {localError && (\r\n              <Label content={localError} basic pointing color=\"red\" />\r\n            )}\r\n          </Form.Field>\r\n          {error && <AdvancedErrorMessage error={error} />}\r\n          <Button\r\n            fluid\r\n            color=\"blue\"\r\n            loading={changingPassword}\r\n            disabled={!!error && !!localError}\r\n            onClick={handleChangePassword}\r\n          >\r\n            Change Password\r\n          </Button>\r\n        </Form>\r\n      </Segment>\r\n    </Grid.Column>\r\n  );\r\n};\r\n\r\nexport default observer(ChangePasswordForm);\r\n","import React from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport AccountDetailsForm from \"./AccountDetailsForm\";\r\nimport ChangePasswordForm from \"./ChangePasswordForm\";\r\n\r\nconst Settings = () => {\r\n  return (\r\n    <Grid columns={2} style={{ marginTop: \"20px\" }}>\r\n      <AccountDetailsForm />\r\n      <ChangePasswordForm />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React, {useContext, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport LoginPage from \"../../features/home/LoginPage\";\r\nimport LeftSidebar from \"../../features/nav/LeftSidebar\";\r\nimport Dashboard from \"../../features/dashboard/Dashboard\";\r\nimport PatientDashboard from \"../../features/patients/dashboard/PatientDashboard\";\r\nimport AppointmentDashboard from \"../../features/appointments/dashboard/AppointmentDashboard\";\r\nimport AdminDashboard from \"../../features/admin/AdminDashboard\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\nimport AvatarDropdown from \"../../features/nav/AvatarDropdown\";\r\nimport ModalContainer from \"../common/modals/ModalContainer\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { RootStoreContext } from \"../stores/rootStore\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { LoadingComponent } from \"./LoadingComponent\";\r\nimport PatientDetails from \"../../features/patients/details/PatientDetails\";\r\nimport NotFound from \"./NotFound\";\r\nimport AppointmentDetails from \"../../features/appointments/details/AppointmentDetails\";\r\nimport Settings from \"../../features/settings/Settings\";\r\n\r\nconst App = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { getUser } = rootStore.userStore;\r\n  const { token, appLoaded, setAppLoaded } = rootStore.commonStore;\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      getUser().finally(() => setAppLoaded());\r\n    } else {\r\n      setAppLoaded();\r\n    }\r\n  }, [token, getUser, setAppLoaded]);\r\n\r\n  if (!appLoaded) {\r\n    return <LoadingComponent content=\"Loading app...\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Route exact path=\"/\" component={LoginPage} />\r\n      <Route\r\n        exact\r\n        path=\"/(.+)\"\r\n        render={() => (\r\n          <>\r\n            <div className=\"app\">\r\n              <ModalContainer />\r\n              <ToastContainer position=\"bottom-right\" />\r\n              <div className=\"app__wrapper\">\r\n                <LeftSidebar />\r\n                <div className=\"app__content\">\r\n                  <Switch>\r\n                    <PrivateRoute path=\"/dashboard\" component={Dashboard} />\r\n                    <PrivateRoute\r\n                      exact\r\n                      path=\"/patients\"\r\n                      component={PatientDashboard}\r\n                    />\r\n                    <PrivateRoute\r\n                      exact\r\n                      path=\"/patients/:id\"\r\n                      component={PatientDetails}\r\n                    />\r\n                    <PrivateRoute\r\n                      exact\r\n                      path=\"/appointments\"\r\n                      component={AppointmentDashboard}\r\n                    />\r\n                    <PrivateRoute\r\n                      exact\r\n                      path=\"/appointments/:id\"\r\n                      component={AppointmentDetails}\r\n                    />\r\n                    <PrivateRoute\r\n                      exact\r\n                      path=\"/admin\"\r\n                      component={AdminDashboard}\r\n                    />\r\n                    <PrivateRoute\r\n                      exact\r\n                      path=\"/settings\"\r\n                      component={Settings}\r\n                    />\r\n                    <PrivateRoute component={NotFound} />\r\n                  </Switch>\r\n                </div>\r\n                <AvatarDropdown />\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default observer(App);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./app/layout/App\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport dateFnsLocalizer from \"react-widgets-date-fns\";\r\nimport { Router } from \"react-router-dom\";\r\nimport \"mobx-react-lite/batchingForReactDom\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\ndateFnsLocalizer();\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <Router history={history}>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}